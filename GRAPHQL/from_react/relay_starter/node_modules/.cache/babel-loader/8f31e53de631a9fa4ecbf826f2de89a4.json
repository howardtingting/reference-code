{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ConnectionHandler = require('./handlers/connection/ConnectionHandler');\n\nvar ConnectionInterface = require('./handlers/connection/ConnectionInterface');\n\nvar MutationHandlers = require('./handlers/connection/MutationHandlers');\n\nvar RelayDefaultHandlerProvider = require('./handlers/RelayDefaultHandlerProvider');\n\nvar applyOptimisticMutation = require('./mutations/applyOptimisticMutation');\n\nvar commitLocalUpdate = require('./mutations/commitLocalUpdate');\n\nvar commitMutation = require('./mutations/commitMutation');\n\nvar RelayDeclarativeMutationConfig = require('./mutations/RelayDeclarativeMutationConfig');\n\nvar RelayNetwork = require('./network/RelayNetwork');\n\nvar RelayObservable = require('./network/RelayObservable');\n\nvar RelayQueryResponseCache = require('./network/RelayQueryResponseCache');\n\nvar fetchQuery = require('./query/fetchQuery');\n\nvar fetchQuery_DEPRECATED = require('./query/fetchQuery_DEPRECATED');\n\nvar fetchQueryInternal = require('./query/fetchQueryInternal');\n\nvar GraphQLTag = require('./query/GraphQLTag');\n\nvar PreloadableQueryRegistry = require('./query/PreloadableQueryRegistry');\n\nvar _require = require('./store/ClientID'),\n    generateClientID = _require.generateClientID,\n    generateUniqueClientID = _require.generateUniqueClientID,\n    isClientID = _require.isClientID;\n\nvar createFragmentSpecResolver = require('./store/createFragmentSpecResolver');\n\nvar createRelayContext = require('./store/createRelayContext');\n\nvar isRelayModernEnvironment = require('./store/isRelayModernEnvironment');\n\nvar readInlineData = require('./store/readInlineData');\n\nvar RelayConcreteVariables = require('./store/RelayConcreteVariables');\n\nvar RelayModernEnvironment = require('./store/RelayModernEnvironment');\n\nvar RelayModernOperationDescriptor = require('./store/RelayModernOperationDescriptor');\n\nvar RelayModernRecord = require('./store/RelayModernRecord');\n\nvar RelayModernSelector = require('./store/RelayModernSelector');\n\nvar RelayModernStore = require('./store/RelayModernStore');\n\nvar RelayOperationTracker = require('./store/RelayOperationTracker');\n\nvar RelayRecordSource = require('./store/RelayRecordSource');\n\nvar RelayStoreUtils = require('./store/RelayStoreUtils');\n\nvar ResolverFragments = require('./store/ResolverFragments');\n\nvar ViewerPattern = require('./store/ViewerPattern');\n\nvar requestSubscription = require('./subscription/requestSubscription');\n\nvar createPayloadFor3DField = require('./util/createPayloadFor3DField');\n\nvar deepFreeze = require('./util/deepFreeze');\n\nvar getFragmentIdentifier = require('./util/getFragmentIdentifier');\n\nvar getPaginationMetadata = require('./util/getPaginationMetadata');\n\nvar getPaginationVariables = require('./util/getPaginationVariables');\n\nvar getPendingOperationsForFragment = require('./util/getPendingOperationsForFragment');\n\nvar getRefetchMetadata = require('./util/getRefetchMetadata');\n\nvar getRelayHandleKey = require('./util/getRelayHandleKey');\n\nvar getRequestIdentifier = require('./util/getRequestIdentifier');\n\nvar getValueAtPath = require('./util/getValueAtPath');\n\nvar isPromise = require('./util/isPromise');\n\nvar isScalarAndEqual = require('./util/isScalarAndEqual');\n\nvar recycleNodesInto = require('./util/recycleNodesInto');\n\nvar RelayConcreteNode = require('./util/RelayConcreteNode');\n\nvar RelayDefaultHandleKey = require('./util/RelayDefaultHandleKey');\n\nvar RelayError = require('./util/RelayError');\n\nvar RelayFeatureFlags = require('./util/RelayFeatureFlags');\n\nvar RelayProfiler = require('./util/RelayProfiler');\n\nvar RelayReplaySubject = require('./util/RelayReplaySubject');\n\nvar reportMissingRequiredFields = require('./util/reportMissingRequiredFields');\n\nvar stableCopy = require('./util/stableCopy');\n\nvar withProvidedVariables = require('./util/withProvidedVariables'); // As early as possible, check for the existence of the JavaScript globals which\n// Relay Runtime relies upon, and produce a clear message if they do not exist.\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  var mapStr = typeof Map !== 'function' ? 'Map' : null;\n  var setStr = typeof Set !== 'function' ? 'Set' : null;\n  var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;\n  var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;\n\n  if (mapStr || setStr || promiseStr || objStr) {\n    throw new Error(\"relay-runtime requires \".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(', and '), \" to exist. \") + 'Use a polyfill to provide these for older browsers.');\n  }\n}\n/**\n * The public interface to Relay Runtime.\n */\n\n\nmodule.exports = {\n  // Core API\n  Environment: RelayModernEnvironment,\n  Network: RelayNetwork,\n  Observable: RelayObservable,\n  QueryResponseCache: RelayQueryResponseCache,\n  RecordSource: RelayRecordSource,\n  Record: RelayModernRecord,\n  ReplaySubject: RelayReplaySubject,\n  Store: RelayModernStore,\n  areEqualSelectors: RelayModernSelector.areEqualSelectors,\n  createFragmentSpecResolver: createFragmentSpecResolver,\n  createNormalizationSelector: RelayModernSelector.createNormalizationSelector,\n  createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,\n  createReaderSelector: RelayModernSelector.createReaderSelector,\n  createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,\n  getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,\n  getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,\n  getNode: GraphQLTag.getNode,\n  getFragment: GraphQLTag.getFragment,\n  getInlineDataFragment: GraphQLTag.getInlineDataFragment,\n  getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,\n  getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,\n  getPaginationFragment: GraphQLTag.getPaginationFragment,\n  getPluralSelector: RelayModernSelector.getPluralSelector,\n  getRefetchableFragment: GraphQLTag.getRefetchableFragment,\n  getRequest: GraphQLTag.getRequest,\n  getRequestIdentifier: getRequestIdentifier,\n  getSelector: RelayModernSelector.getSelector,\n  getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,\n  getSingularSelector: RelayModernSelector.getSingularSelector,\n  getStorageKey: RelayStoreUtils.getStorageKey,\n  getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,\n  getVariablesFromObject: RelayModernSelector.getVariablesFromObject,\n  getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,\n  getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,\n  reportMissingRequiredFields: reportMissingRequiredFields,\n  graphql: GraphQLTag.graphql,\n  isFragment: GraphQLTag.isFragment,\n  isInlineDataFragment: GraphQLTag.isInlineDataFragment,\n  isRequest: GraphQLTag.isRequest,\n  readInlineData: readInlineData,\n  // Declarative mutation API\n  MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,\n  RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,\n  // Extensions\n  DefaultHandlerProvider: RelayDefaultHandlerProvider,\n  ConnectionHandler: ConnectionHandler,\n  MutationHandlers: MutationHandlers,\n  VIEWER_ID: ViewerPattern.VIEWER_ID,\n  VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,\n  // Helpers (can be implemented via the above API)\n  applyOptimisticMutation: applyOptimisticMutation,\n  commitLocalUpdate: commitLocalUpdate,\n  commitMutation: commitMutation,\n  fetchQuery: fetchQuery,\n  fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,\n  isRelayModernEnvironment: isRelayModernEnvironment,\n  requestSubscription: requestSubscription,\n  // Configuration interface for legacy or special uses\n  ConnectionInterface: ConnectionInterface,\n  // Utilities\n  PreloadableQueryRegistry: PreloadableQueryRegistry,\n  RelayProfiler: RelayProfiler,\n  createPayloadFor3DField: createPayloadFor3DField,\n  // INTERNAL-ONLY: These exports might be removed at any point.\n  RelayConcreteNode: RelayConcreteNode,\n  RelayError: RelayError,\n  RelayFeatureFlags: RelayFeatureFlags,\n  DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,\n  FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,\n  FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,\n  ID_KEY: RelayStoreUtils.ID_KEY,\n  REF_KEY: RelayStoreUtils.REF_KEY,\n  REFS_KEY: RelayStoreUtils.REFS_KEY,\n  ROOT_ID: RelayStoreUtils.ROOT_ID,\n  ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,\n  TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,\n  deepFreeze: deepFreeze,\n  generateClientID: generateClientID,\n  generateUniqueClientID: generateUniqueClientID,\n  getRelayHandleKey: getRelayHandleKey,\n  isClientID: isClientID,\n  isPromise: isPromise,\n  isScalarAndEqual: isScalarAndEqual,\n  recycleNodesInto: recycleNodesInto,\n  stableCopy: stableCopy,\n  getFragmentIdentifier: getFragmentIdentifier,\n  getRefetchMetadata: getRefetchMetadata,\n  getPaginationMetadata: getPaginationMetadata,\n  getPaginationVariables: getPaginationVariables,\n  getPendingOperationsForFragment: getPendingOperationsForFragment,\n  getValueAtPath: getValueAtPath,\n  __internal: {\n    ResolverFragments: ResolverFragments,\n    OperationTracker: RelayOperationTracker,\n    createRelayContext: createRelayContext,\n    getOperationVariables: RelayConcreteVariables.getOperationVariables,\n    fetchQuery: fetchQueryInternal.fetchQuery,\n    fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,\n    getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,\n    getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,\n    withProvidedVariables: withProvidedVariables\n  }\n};","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/index.js"],"names":["ConnectionHandler","require","ConnectionInterface","MutationHandlers","RelayDefaultHandlerProvider","applyOptimisticMutation","commitLocalUpdate","commitMutation","RelayDeclarativeMutationConfig","RelayNetwork","RelayObservable","RelayQueryResponseCache","fetchQuery","fetchQuery_DEPRECATED","fetchQueryInternal","GraphQLTag","PreloadableQueryRegistry","_require","generateClientID","generateUniqueClientID","isClientID","createFragmentSpecResolver","createRelayContext","isRelayModernEnvironment","readInlineData","RelayConcreteVariables","RelayModernEnvironment","RelayModernOperationDescriptor","RelayModernRecord","RelayModernSelector","RelayModernStore","RelayOperationTracker","RelayRecordSource","RelayStoreUtils","ResolverFragments","ViewerPattern","requestSubscription","createPayloadFor3DField","deepFreeze","getFragmentIdentifier","getPaginationMetadata","getPaginationVariables","getPendingOperationsForFragment","getRefetchMetadata","getRelayHandleKey","getRequestIdentifier","getValueAtPath","isPromise","isScalarAndEqual","recycleNodesInto","RelayConcreteNode","RelayDefaultHandleKey","RelayError","RelayFeatureFlags","RelayProfiler","RelayReplaySubject","reportMissingRequiredFields","stableCopy","withProvidedVariables","process","env","NODE_ENV","mapStr","Map","setStr","Set","promiseStr","Promise","objStr","Object","assign","Error","concat","filter","Boolean","join","module","exports","Environment","Network","Observable","QueryResponseCache","RecordSource","Record","ReplaySubject","Store","areEqualSelectors","createNormalizationSelector","createOperationDescriptor","createReaderSelector","createRequestDescriptor","getDataIDsFromFragment","getDataIDsFromObject","getNode","getFragment","getInlineDataFragment","getModuleComponentKey","getModuleOperationKey","getPaginationFragment","getPluralSelector","getRefetchableFragment","getRequest","getSelector","getSelectorsFromObject","getSingularSelector","getStorageKey","getVariablesFromFragment","getVariablesFromObject","getVariablesFromPluralFragment","getVariablesFromSingularFragment","graphql","isFragment","isInlineDataFragment","isRequest","MutationTypes","RangeOperations","DefaultHandlerProvider","VIEWER_ID","VIEWER_TYPE","DEFAULT_HANDLE_KEY","FRAGMENTS_KEY","FRAGMENT_OWNER_KEY","ID_KEY","REF_KEY","REFS_KEY","ROOT_ID","ROOT_TYPE","TYPENAME_KEY","__internal","OperationTracker","getOperationVariables","fetchQueryDeduped","getPromiseForActiveRequest","getObservableForActiveRequest"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ConnectionHandler = require('./handlers/connection/ConnectionHandler');\n\nvar ConnectionInterface = require('./handlers/connection/ConnectionInterface');\n\nvar MutationHandlers = require('./handlers/connection/MutationHandlers');\n\nvar RelayDefaultHandlerProvider = require('./handlers/RelayDefaultHandlerProvider');\n\nvar applyOptimisticMutation = require('./mutations/applyOptimisticMutation');\n\nvar commitLocalUpdate = require('./mutations/commitLocalUpdate');\n\nvar commitMutation = require('./mutations/commitMutation');\n\nvar RelayDeclarativeMutationConfig = require('./mutations/RelayDeclarativeMutationConfig');\n\nvar RelayNetwork = require('./network/RelayNetwork');\n\nvar RelayObservable = require('./network/RelayObservable');\n\nvar RelayQueryResponseCache = require('./network/RelayQueryResponseCache');\n\nvar fetchQuery = require('./query/fetchQuery');\n\nvar fetchQuery_DEPRECATED = require('./query/fetchQuery_DEPRECATED');\n\nvar fetchQueryInternal = require('./query/fetchQueryInternal');\n\nvar GraphQLTag = require('./query/GraphQLTag');\n\nvar PreloadableQueryRegistry = require('./query/PreloadableQueryRegistry');\n\nvar _require = require('./store/ClientID'),\n    generateClientID = _require.generateClientID,\n    generateUniqueClientID = _require.generateUniqueClientID,\n    isClientID = _require.isClientID;\n\nvar createFragmentSpecResolver = require('./store/createFragmentSpecResolver');\n\nvar createRelayContext = require('./store/createRelayContext');\n\nvar isRelayModernEnvironment = require('./store/isRelayModernEnvironment');\n\nvar readInlineData = require('./store/readInlineData');\n\nvar RelayConcreteVariables = require('./store/RelayConcreteVariables');\n\nvar RelayModernEnvironment = require('./store/RelayModernEnvironment');\n\nvar RelayModernOperationDescriptor = require('./store/RelayModernOperationDescriptor');\n\nvar RelayModernRecord = require('./store/RelayModernRecord');\n\nvar RelayModernSelector = require('./store/RelayModernSelector');\n\nvar RelayModernStore = require('./store/RelayModernStore');\n\nvar RelayOperationTracker = require('./store/RelayOperationTracker');\n\nvar RelayRecordSource = require('./store/RelayRecordSource');\n\nvar RelayStoreUtils = require('./store/RelayStoreUtils');\n\nvar ResolverFragments = require('./store/ResolverFragments');\n\nvar ViewerPattern = require('./store/ViewerPattern');\n\nvar requestSubscription = require('./subscription/requestSubscription');\n\nvar createPayloadFor3DField = require('./util/createPayloadFor3DField');\n\nvar deepFreeze = require('./util/deepFreeze');\n\nvar getFragmentIdentifier = require('./util/getFragmentIdentifier');\n\nvar getPaginationMetadata = require('./util/getPaginationMetadata');\n\nvar getPaginationVariables = require('./util/getPaginationVariables');\n\nvar getPendingOperationsForFragment = require('./util/getPendingOperationsForFragment');\n\nvar getRefetchMetadata = require('./util/getRefetchMetadata');\n\nvar getRelayHandleKey = require('./util/getRelayHandleKey');\n\nvar getRequestIdentifier = require('./util/getRequestIdentifier');\n\nvar getValueAtPath = require('./util/getValueAtPath');\n\nvar isPromise = require('./util/isPromise');\n\nvar isScalarAndEqual = require('./util/isScalarAndEqual');\n\nvar recycleNodesInto = require('./util/recycleNodesInto');\n\nvar RelayConcreteNode = require('./util/RelayConcreteNode');\n\nvar RelayDefaultHandleKey = require('./util/RelayDefaultHandleKey');\n\nvar RelayError = require('./util/RelayError');\n\nvar RelayFeatureFlags = require('./util/RelayFeatureFlags');\n\nvar RelayProfiler = require('./util/RelayProfiler');\n\nvar RelayReplaySubject = require('./util/RelayReplaySubject');\n\nvar reportMissingRequiredFields = require('./util/reportMissingRequiredFields');\n\nvar stableCopy = require('./util/stableCopy');\n\nvar withProvidedVariables = require('./util/withProvidedVariables');\n\n// As early as possible, check for the existence of the JavaScript globals which\n// Relay Runtime relies upon, and produce a clear message if they do not exist.\nif (process.env.NODE_ENV !== \"production\") {\n  var mapStr = typeof Map !== 'function' ? 'Map' : null;\n  var setStr = typeof Set !== 'function' ? 'Set' : null;\n  var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;\n  var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;\n\n  if (mapStr || setStr || promiseStr || objStr) {\n    throw new Error(\"relay-runtime requires \".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(', and '), \" to exist. \") + 'Use a polyfill to provide these for older browsers.');\n  }\n}\n/**\n * The public interface to Relay Runtime.\n */\n\n\nmodule.exports = {\n  // Core API\n  Environment: RelayModernEnvironment,\n  Network: RelayNetwork,\n  Observable: RelayObservable,\n  QueryResponseCache: RelayQueryResponseCache,\n  RecordSource: RelayRecordSource,\n  Record: RelayModernRecord,\n  ReplaySubject: RelayReplaySubject,\n  Store: RelayModernStore,\n  areEqualSelectors: RelayModernSelector.areEqualSelectors,\n  createFragmentSpecResolver: createFragmentSpecResolver,\n  createNormalizationSelector: RelayModernSelector.createNormalizationSelector,\n  createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,\n  createReaderSelector: RelayModernSelector.createReaderSelector,\n  createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,\n  getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,\n  getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,\n  getNode: GraphQLTag.getNode,\n  getFragment: GraphQLTag.getFragment,\n  getInlineDataFragment: GraphQLTag.getInlineDataFragment,\n  getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,\n  getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,\n  getPaginationFragment: GraphQLTag.getPaginationFragment,\n  getPluralSelector: RelayModernSelector.getPluralSelector,\n  getRefetchableFragment: GraphQLTag.getRefetchableFragment,\n  getRequest: GraphQLTag.getRequest,\n  getRequestIdentifier: getRequestIdentifier,\n  getSelector: RelayModernSelector.getSelector,\n  getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,\n  getSingularSelector: RelayModernSelector.getSingularSelector,\n  getStorageKey: RelayStoreUtils.getStorageKey,\n  getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,\n  getVariablesFromObject: RelayModernSelector.getVariablesFromObject,\n  getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,\n  getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,\n  reportMissingRequiredFields: reportMissingRequiredFields,\n  graphql: GraphQLTag.graphql,\n  isFragment: GraphQLTag.isFragment,\n  isInlineDataFragment: GraphQLTag.isInlineDataFragment,\n  isRequest: GraphQLTag.isRequest,\n  readInlineData: readInlineData,\n  // Declarative mutation API\n  MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,\n  RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,\n  // Extensions\n  DefaultHandlerProvider: RelayDefaultHandlerProvider,\n  ConnectionHandler: ConnectionHandler,\n  MutationHandlers: MutationHandlers,\n  VIEWER_ID: ViewerPattern.VIEWER_ID,\n  VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,\n  // Helpers (can be implemented via the above API)\n  applyOptimisticMutation: applyOptimisticMutation,\n  commitLocalUpdate: commitLocalUpdate,\n  commitMutation: commitMutation,\n  fetchQuery: fetchQuery,\n  fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,\n  isRelayModernEnvironment: isRelayModernEnvironment,\n  requestSubscription: requestSubscription,\n  // Configuration interface for legacy or special uses\n  ConnectionInterface: ConnectionInterface,\n  // Utilities\n  PreloadableQueryRegistry: PreloadableQueryRegistry,\n  RelayProfiler: RelayProfiler,\n  createPayloadFor3DField: createPayloadFor3DField,\n  // INTERNAL-ONLY: These exports might be removed at any point.\n  RelayConcreteNode: RelayConcreteNode,\n  RelayError: RelayError,\n  RelayFeatureFlags: RelayFeatureFlags,\n  DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,\n  FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,\n  FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,\n  ID_KEY: RelayStoreUtils.ID_KEY,\n  REF_KEY: RelayStoreUtils.REF_KEY,\n  REFS_KEY: RelayStoreUtils.REFS_KEY,\n  ROOT_ID: RelayStoreUtils.ROOT_ID,\n  ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,\n  TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,\n  deepFreeze: deepFreeze,\n  generateClientID: generateClientID,\n  generateUniqueClientID: generateUniqueClientID,\n  getRelayHandleKey: getRelayHandleKey,\n  isClientID: isClientID,\n  isPromise: isPromise,\n  isScalarAndEqual: isScalarAndEqual,\n  recycleNodesInto: recycleNodesInto,\n  stableCopy: stableCopy,\n  getFragmentIdentifier: getFragmentIdentifier,\n  getRefetchMetadata: getRefetchMetadata,\n  getPaginationMetadata: getPaginationMetadata,\n  getPaginationVariables: getPaginationVariables,\n  getPendingOperationsForFragment: getPendingOperationsForFragment,\n  getValueAtPath: getValueAtPath,\n  __internal: {\n    ResolverFragments: ResolverFragments,\n    OperationTracker: RelayOperationTracker,\n    createRelayContext: createRelayContext,\n    getOperationVariables: RelayConcreteVariables.getOperationVariables,\n    fetchQuery: fetchQueryInternal.fetchQuery,\n    fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,\n    getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,\n    getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,\n    withProvidedVariables: withProvidedVariables\n  }\n};"]},"metadata":{},"sourceType":"script"}