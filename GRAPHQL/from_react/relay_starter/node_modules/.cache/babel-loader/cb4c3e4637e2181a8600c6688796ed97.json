{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar useMemo = React.useMemo,\n    useRef = React.useRef,\n    useState = React.useState;\n\nfunction useMemoVariables(variables) {\n  var _variablesChangedGene2; // The value of this ref is a counter that should be incremented when\n  // variables change. This allows us to use the counter as a\n  // memoization value to indicate if the computation for useMemo\n  // should be re-executed.\n\n\n  var variablesChangedGenerationRef = useRef(0); // We mirror the variables to check if they have changed between renders\n\n  var _useState = useState(variables),\n      mirroredVariables = _useState[0],\n      setMirroredVariables = _useState[1];\n\n  var variablesChanged = !areEqual(variables, mirroredVariables);\n\n  if (variablesChanged) {\n    var _variablesChangedGene;\n\n    variablesChangedGenerationRef.current = ((_variablesChangedGene = variablesChangedGenerationRef.current) !== null && _variablesChangedGene !== void 0 ? _variablesChangedGene : 0) + 1;\n    setMirroredVariables(variables);\n  } // NOTE: We disable react-hooks-deps warning because we explicitly\n  // don't want to memoize on object identity\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var memoVariables = useMemo(function () {\n    return variables;\n  }, [variablesChangedGenerationRef.current]);\n  return [memoVariables, (_variablesChangedGene2 = variablesChangedGenerationRef.current) !== null && _variablesChangedGene2 !== void 0 ? _variablesChangedGene2 : 0];\n}\n\nmodule.exports = useMemoVariables;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/useMemoVariables.js"],"names":["areEqual","require","React","useMemo","useRef","useState","useMemoVariables","variables","_variablesChangedGene2","variablesChangedGenerationRef","_useState","mirroredVariables","setMirroredVariables","variablesChanged","_variablesChangedGene","current","memoVariables","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIE,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,IACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;AAAA,IAEIC,QAAQ,GAAGH,KAAK,CAACG,QAFrB;;AAIA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AACnC,MAAIC,sBAAJ,CADmC,CAGnC;AACA;AACA;AACA;;;AACA,MAAIC,6BAA6B,GAAGL,MAAM,CAAC,CAAD,CAA1C,CAPmC,CAOY;;AAE/C,MAAIM,SAAS,GAAGL,QAAQ,CAACE,SAAD,CAAxB;AAAA,MACII,iBAAiB,GAAGD,SAAS,CAAC,CAAD,CADjC;AAAA,MAEIE,oBAAoB,GAAGF,SAAS,CAAC,CAAD,CAFpC;;AAIA,MAAIG,gBAAgB,GAAG,CAACb,QAAQ,CAACO,SAAD,EAAYI,iBAAZ,CAAhC;;AAEA,MAAIE,gBAAJ,EAAsB;AACpB,QAAIC,qBAAJ;;AAEAL,IAAAA,6BAA6B,CAACM,OAA9B,GAAwC,CAAC,CAACD,qBAAqB,GAAGL,6BAA6B,CAACM,OAAvD,MAAoE,IAApE,IAA4ED,qBAAqB,KAAK,KAAK,CAA3G,GAA+GA,qBAA/G,GAAuI,CAAxI,IAA6I,CAArL;AACAF,IAAAA,oBAAoB,CAACL,SAAD,CAApB;AACD,GApBkC,CAoBjC;AACF;AACA;;;AAGA,MAAIS,aAAa,GAAGb,OAAO,CAAC,YAAY;AACtC,WAAOI,SAAP;AACD,GAF0B,EAExB,CAACE,6BAA6B,CAACM,OAA/B,CAFwB,CAA3B;AAGA,SAAO,CAACC,aAAD,EAAgB,CAACR,sBAAsB,GAAGC,6BAA6B,CAACM,OAAxD,MAAqE,IAArE,IAA6EP,sBAAsB,KAAK,KAAK,CAA7G,GAAiHA,sBAAjH,GAA0I,CAA1J,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar React = require('react');\n\nvar useMemo = React.useMemo,\n    useRef = React.useRef,\n    useState = React.useState;\n\nfunction useMemoVariables(variables) {\n  var _variablesChangedGene2;\n\n  // The value of this ref is a counter that should be incremented when\n  // variables change. This allows us to use the counter as a\n  // memoization value to indicate if the computation for useMemo\n  // should be re-executed.\n  var variablesChangedGenerationRef = useRef(0); // We mirror the variables to check if they have changed between renders\n\n  var _useState = useState(variables),\n      mirroredVariables = _useState[0],\n      setMirroredVariables = _useState[1];\n\n  var variablesChanged = !areEqual(variables, mirroredVariables);\n\n  if (variablesChanged) {\n    var _variablesChangedGene;\n\n    variablesChangedGenerationRef.current = ((_variablesChangedGene = variablesChangedGenerationRef.current) !== null && _variablesChangedGene !== void 0 ? _variablesChangedGene : 0) + 1;\n    setMirroredVariables(variables);\n  } // NOTE: We disable react-hooks-deps warning because we explicitly\n  // don't want to memoize on object identity\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var memoVariables = useMemo(function () {\n    return variables;\n  }, [variablesChangedGenerationRef.current]);\n  return [memoVariables, (_variablesChangedGene2 = variablesChangedGenerationRef.current) !== null && _variablesChangedGene2 !== void 0 ? _variablesChangedGene2 : 0];\n}\n\nmodule.exports = useMemoVariables;"]},"metadata":{},"sourceType":"script"}