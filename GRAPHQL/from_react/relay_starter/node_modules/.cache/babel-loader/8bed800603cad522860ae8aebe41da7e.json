{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar WEAKMAP_SUPPORTED = typeof WeakMap === 'function';\nvar debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();\n\nfunction withProvidedVariables(userSuppliedVariables, providedVariables) {\n  if (providedVariables != null) {\n    var operationVariables = {};\n    Object.assign(operationVariables, userSuppliedVariables);\n    Object.keys(providedVariables).forEach(function (varName) {\n      var providerFunction = providedVariables[varName].get;\n      var providerResult = providerFunction(); // people like to ignore these warnings, so use the cache to\n      // enforce that we only compute the value the first time\n\n      if (!debugCache.has(providerFunction)) {\n        debugCache.set(providerFunction, providerResult);\n        operationVariables[varName] = providerResult;\n      } else {\n        var cachedResult = debugCache.get(providerFunction);\n\n        if (process.env.NODE_ENV !== \"production\") {\n          process.env.NODE_ENV !== \"production\" ? warning(areEqual(providerResult, cachedResult), 'Relay: Expected function `%s` for provider `%s` to be a pure function, ' + 'but got conflicting return values `%s` and `%s`', providerFunction.name, varName, providerResult, cachedResult) : void 0;\n        }\n\n        operationVariables[varName] = cachedResult;\n      }\n    });\n    return operationVariables;\n  } else {\n    return userSuppliedVariables;\n  }\n}\n\nmodule.exports = withProvidedVariables;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/util/withProvidedVariables.js"],"names":["areEqual","require","warning","WEAKMAP_SUPPORTED","WeakMap","debugCache","Map","withProvidedVariables","userSuppliedVariables","providedVariables","operationVariables","Object","assign","keys","forEach","varName","providerFunction","get","providerResult","has","set","cachedResult","process","env","NODE_ENV","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIE,iBAAiB,GAAG,OAAOC,OAAP,KAAmB,UAA3C;AACA,IAAIC,UAAU,GAAGF,iBAAiB,GAAG,IAAIC,OAAJ,EAAH,GAAmB,IAAIE,GAAJ,EAArD;;AAEA,SAASC,qBAAT,CAA+BC,qBAA/B,EAAsDC,iBAAtD,EAAyE;AACvE,MAAIA,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,QAAIC,kBAAkB,GAAG,EAAzB;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcF,kBAAd,EAAkCF,qBAAlC;AACAG,IAAAA,MAAM,CAACE,IAAP,CAAYJ,iBAAZ,EAA+BK,OAA/B,CAAuC,UAAUC,OAAV,EAAmB;AACxD,UAAIC,gBAAgB,GAAGP,iBAAiB,CAACM,OAAD,CAAjB,CAA2BE,GAAlD;AACA,UAAIC,cAAc,GAAGF,gBAAgB,EAArC,CAFwD,CAEf;AACzC;;AAEA,UAAI,CAACX,UAAU,CAACc,GAAX,CAAeH,gBAAf,CAAL,EAAuC;AACrCX,QAAAA,UAAU,CAACe,GAAX,CAAeJ,gBAAf,EAAiCE,cAAjC;AACAR,QAAAA,kBAAkB,CAACK,OAAD,CAAlB,GAA8BG,cAA9B;AACD,OAHD,MAGO;AACL,YAAIG,YAAY,GAAGhB,UAAU,CAACY,GAAX,CAAeD,gBAAf,CAAnB;;AAEA,YAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,UAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCtB,OAAO,CAACF,QAAQ,CAACkB,cAAD,EAAiBG,YAAjB,CAAT,EAAyC,4EAA4E,iDAArH,EAAwKL,gBAAgB,CAACS,IAAzL,EAA+LV,OAA/L,EAAwMG,cAAxM,EAAwNG,YAAxN,CAA/C,GAAuR,KAAK,CAA5R;AACD;;AAEDX,QAAAA,kBAAkB,CAACK,OAAD,CAAlB,GAA8BM,YAA9B;AACD;AACF,KAjBD;AAkBA,WAAOX,kBAAP;AACD,GAtBD,MAsBO;AACL,WAAOF,qBAAP;AACD;AACF;;AAEDkB,MAAM,CAACC,OAAP,GAAiBpB,qBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar WEAKMAP_SUPPORTED = typeof WeakMap === 'function';\nvar debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();\n\nfunction withProvidedVariables(userSuppliedVariables, providedVariables) {\n  if (providedVariables != null) {\n    var operationVariables = {};\n    Object.assign(operationVariables, userSuppliedVariables);\n    Object.keys(providedVariables).forEach(function (varName) {\n      var providerFunction = providedVariables[varName].get;\n      var providerResult = providerFunction(); // people like to ignore these warnings, so use the cache to\n      // enforce that we only compute the value the first time\n\n      if (!debugCache.has(providerFunction)) {\n        debugCache.set(providerFunction, providerResult);\n        operationVariables[varName] = providerResult;\n      } else {\n        var cachedResult = debugCache.get(providerFunction);\n\n        if (process.env.NODE_ENV !== \"production\") {\n          process.env.NODE_ENV !== \"production\" ? warning(areEqual(providerResult, cachedResult), 'Relay: Expected function `%s` for provider `%s` to be a pure function, ' + 'but got conflicting return values `%s` and `%s`', providerFunction.name, varName, providerResult, cachedResult) : void 0;\n        }\n\n        operationVariables[varName] = cachedResult;\n      }\n    });\n    return operationVariables;\n  } else {\n    return userSuppliedVariables;\n  }\n}\n\nmodule.exports = withProvidedVariables;"]},"metadata":{},"sourceType":"script"}