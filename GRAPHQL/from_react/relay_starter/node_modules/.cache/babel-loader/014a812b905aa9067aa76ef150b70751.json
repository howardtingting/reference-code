{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('react'),\n    useCallback = _require.useCallback,\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook returns a mutable React ref that holds the value of whether a\n * fetch request is in flight. The reason this is a mutable ref instead of\n * state is because we don't actually want to trigger an update when this\n * changes, but instead synchronously keep track of whether the network request\n * is in flight, for example in order to bail out of a request if one is\n * already in flight. If this was state, due to the nature of concurrent\n * updates, this value wouldn't be in sync with when the request is actually\n * in flight.\n * The additional functions returned by this Hook can be used to mutate\n * the ref.\n */\n\n\nfunction useFetchTrackingRef() {\n  var subscriptionRef = useRef(null);\n  var isFetchingRef = useRef(false);\n  var disposeFetch = useCallback(function () {\n    if (subscriptionRef.current != null) {\n      subscriptionRef.current.unsubscribe();\n      subscriptionRef.current = null;\n    }\n\n    isFetchingRef.current = false;\n  }, []);\n  var startFetch = useCallback(function (subscription) {\n    subscriptionRef.current = subscription;\n    isFetchingRef.current = true;\n  }, []);\n  var completeFetch = useCallback(function () {\n    subscriptionRef.current = null;\n    isFetchingRef.current = false;\n  }, []); // Dipose of ongoing fetch on unmount\n\n  useEffect(function () {\n    return disposeFetch;\n  }, [disposeFetch]);\n  return {\n    isFetchingRef: isFetchingRef,\n    startFetch: startFetch,\n    disposeFetch: disposeFetch,\n    completeFetch: completeFetch\n  };\n}\n\nmodule.exports = useFetchTrackingRef;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js"],"names":["_require","require","useCallback","useEffect","useRef","useFetchTrackingRef","subscriptionRef","isFetchingRef","disposeFetch","current","unsubscribe","startFetch","subscription","completeFetch","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,OAAD,CAAtB;AAAA,IACIC,WAAW,GAAGF,QAAQ,CAACE,WAD3B;AAAA,IAEIC,SAAS,GAAGH,QAAQ,CAACG,SAFzB;AAAA,IAGIC,MAAM,GAAGJ,QAAQ,CAACI,MAHtB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,mBAAT,GAA+B;AAC7B,MAAIC,eAAe,GAAGF,MAAM,CAAC,IAAD,CAA5B;AACA,MAAIG,aAAa,GAAGH,MAAM,CAAC,KAAD,CAA1B;AACA,MAAII,YAAY,GAAGN,WAAW,CAAC,YAAY;AACzC,QAAII,eAAe,CAACG,OAAhB,IAA2B,IAA/B,EAAqC;AACnCH,MAAAA,eAAe,CAACG,OAAhB,CAAwBC,WAAxB;AACAJ,MAAAA,eAAe,CAACG,OAAhB,GAA0B,IAA1B;AACD;;AAEDF,IAAAA,aAAa,CAACE,OAAd,GAAwB,KAAxB;AACD,GAP6B,EAO3B,EAP2B,CAA9B;AAQA,MAAIE,UAAU,GAAGT,WAAW,CAAC,UAAUU,YAAV,EAAwB;AACnDN,IAAAA,eAAe,CAACG,OAAhB,GAA0BG,YAA1B;AACAL,IAAAA,aAAa,CAACE,OAAd,GAAwB,IAAxB;AACD,GAH2B,EAGzB,EAHyB,CAA5B;AAIA,MAAII,aAAa,GAAGX,WAAW,CAAC,YAAY;AAC1CI,IAAAA,eAAe,CAACG,OAAhB,GAA0B,IAA1B;AACAF,IAAAA,aAAa,CAACE,OAAd,GAAwB,KAAxB;AACD,GAH8B,EAG5B,EAH4B,CAA/B,CAf6B,CAkBrB;;AAERN,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAOK,YAAP;AACD,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAGA,SAAO;AACLD,IAAAA,aAAa,EAAEA,aADV;AAELI,IAAAA,UAAU,EAAEA,UAFP;AAGLH,IAAAA,YAAY,EAAEA,YAHT;AAILK,IAAAA,aAAa,EAAEA;AAJV,GAAP;AAMD;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,mBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('react'),\n    useCallback = _require.useCallback,\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook returns a mutable React ref that holds the value of whether a\n * fetch request is in flight. The reason this is a mutable ref instead of\n * state is because we don't actually want to trigger an update when this\n * changes, but instead synchronously keep track of whether the network request\n * is in flight, for example in order to bail out of a request if one is\n * already in flight. If this was state, due to the nature of concurrent\n * updates, this value wouldn't be in sync with when the request is actually\n * in flight.\n * The additional functions returned by this Hook can be used to mutate\n * the ref.\n */\n\n\nfunction useFetchTrackingRef() {\n  var subscriptionRef = useRef(null);\n  var isFetchingRef = useRef(false);\n  var disposeFetch = useCallback(function () {\n    if (subscriptionRef.current != null) {\n      subscriptionRef.current.unsubscribe();\n      subscriptionRef.current = null;\n    }\n\n    isFetchingRef.current = false;\n  }, []);\n  var startFetch = useCallback(function (subscription) {\n    subscriptionRef.current = subscription;\n    isFetchingRef.current = true;\n  }, []);\n  var completeFetch = useCallback(function () {\n    subscriptionRef.current = null;\n    isFetchingRef.current = false;\n  }, []); // Dipose of ongoing fetch on unmount\n\n  useEffect(function () {\n    return disposeFetch;\n  }, [disposeFetch]);\n  return {\n    isFetchingRef: isFetchingRef,\n    startFetch: startFetch,\n    disposeFetch: disposeFetch,\n    completeFetch: completeFetch\n  };\n}\n\nmodule.exports = useFetchTrackingRef;"]},"metadata":{},"sourceType":"script"}