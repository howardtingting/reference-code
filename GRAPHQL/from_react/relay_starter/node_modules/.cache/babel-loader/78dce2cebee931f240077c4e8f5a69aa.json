{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    _require3$__internal = _require3.__internal,\n    fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n    fetchQuery = _require3$__internal.fetchQuery;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n      fetchPolicy = preloadedQuery.fetchPolicy,\n      source = preloadedQuery.source,\n      variables = preloadedQuery.variables,\n      networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n\n    if (source != null && environment === preloadedQuery.environment) {\n      // If the source observable exists and the environments match, reuse\n      // the source observable.\n      // If the source observable happens to be empty, we need to fall back\n      // and re-execute and de-dupe the query (at render time).\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      // If a call to loadQuery is made with a particular environment, and that\n      // preloaded query is passed to usePreloadedQuery in a different environment\n      // context, we cannot re-use the existing preloaded query.\n      // Instead, we need to fall back and re-execute and de-dupe the query with\n      // the new environment (at render time).\n      // TODO T68036756 track occurences of this warning and turn it into a hard error\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      // if (source == null)\n      // If the source observable does not exist, we need to\n      // fall back and re-execute and de-dupe the query (at render time).\n      fetchObservable = fallbackFetchObservable;\n    }\n\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n\n  return data;\n}\n\nmodule.exports = usePreloadedQuery;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js"],"names":["_require","require","useTrackLoadQueryInRender","useLazyLoadQueryNode","useMemoOperationDescriptor","useRelayEnvironment","invariant","_require2","useDebugValue","_require3","_require3$__internal","__internal","fetchQueryDeduped","fetchQuery","warning","usePreloadedQuery","gqlQuery","preloadedQuery","options","environment","fetchKey","fetchPolicy","source","variables","networkCacheConfig","operation","useLazyLoadQueryNodeParams","kind","request","node","params","name","process","env","NODE_ENV","componentDisplayName","fetchObservable","identifier","executeWithSource","execute","query","renderPolicy","UNSTABLE_renderPolicy","isDisposed","fallbackFetchObservable","ifEmpty","data","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    _require3$__internal = _require3.__internal,\n    fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n    fetchQuery = _require3$__internal.fetchQuery;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n      fetchPolicy = preloadedQuery.fetchPolicy,\n      source = preloadedQuery.source,\n      variables = preloadedQuery.variables,\n      networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n\n    if (source != null && environment === preloadedQuery.environment) {\n      // If the source observable exists and the environments match, reuse\n      // the source observable.\n      // If the source observable happens to be empty, we need to fall back\n      // and re-execute and de-dupe the query (at render time).\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      // If a call to loadQuery is made with a particular environment, and that\n      // preloaded query is passed to usePreloadedQuery in a different environment\n      // context, we cannot re-use the existing preloaded query.\n      // Instead, we need to fall back and re-execute and de-dupe the query with\n      // the new environment (at render time).\n      // TODO T68036756 track occurences of this warning and turn it into a hard error\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      // if (source == null)\n      // If the source observable does not exist, we need to\n      // fall back and re-execute and de-dupe the query (at render time).\n      fetchObservable = fallbackFetchObservable;\n    }\n\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n\n  return data;\n}\n\nmodule.exports = usePreloadedQuery;"]},"metadata":{},"sourceType":"script"}