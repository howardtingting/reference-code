{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar deepFreeze = require('../util/deepFreeze');\n\nvar getRequestIdentifier = require('../util/getRequestIdentifier');\n\nvar _require = require('./RelayConcreteVariables'),\n    getOperationVariables = _require.getOperationVariables;\n\nvar _require2 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require2.createNormalizationSelector,\n    createReaderSelector = _require2.createReaderSelector;\n\nvar _require3 = require('./RelayStoreUtils'),\n    ROOT_ID = _require3.ROOT_ID;\n/**\n * Creates an instance of the `OperationDescriptor` type defined in\n * `RelayStoreTypes` given an operation and some variables. The input variables\n * are filtered to exclude variables that do not match defined arguments on the\n * operation, and default values are populated for null values.\n */\n\n\nfunction createOperationDescriptor(request, variables, cacheConfig) {\n  var dataID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_ID;\n  var operation = request.operation;\n  var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);\n  var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);\n  var operationDescriptor = {\n    fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),\n    request: requestDescriptor,\n    root: createNormalizationSelector(operation, dataID, operationVariables)\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Freezing properties short-circuits a deepFreeze of snapshots that contain\n    // an OperationDescriptor via their selector's owner, avoiding stack\n    // overflow on larger queries.\n    Object.freeze(operationDescriptor.fragment);\n    Object.freeze(operationDescriptor.root);\n    Object.freeze(operationDescriptor);\n  }\n\n  return operationDescriptor;\n}\n\nfunction createRequestDescriptor(request, variables, cacheConfig) {\n  var requestDescriptor = {\n    identifier: getRequestIdentifier(request.params, variables),\n    node: request,\n    variables: variables,\n    cacheConfig: cacheConfig\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    deepFreeze(variables);\n    Object.freeze(request);\n    Object.freeze(requestDescriptor);\n  }\n\n  return requestDescriptor;\n}\n\nmodule.exports = {\n  createOperationDescriptor: createOperationDescriptor,\n  createRequestDescriptor: createRequestDescriptor\n};","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"],"names":["deepFreeze","require","getRequestIdentifier","_require","getOperationVariables","_require2","createNormalizationSelector","createReaderSelector","_require3","ROOT_ID","createOperationDescriptor","request","variables","cacheConfig","dataID","arguments","length","undefined","operation","operationVariables","params","providedVariables","requestDescriptor","createRequestDescriptor","operationDescriptor","fragment","root","process","env","NODE_ENV","Object","freeze","identifier","node","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,8BAAD,CAAlC;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAtB;AAAA,IACIG,qBAAqB,GAAGD,QAAQ,CAACC,qBADrC;;AAGA,IAAIC,SAAS,GAAGJ,OAAO,CAAC,uBAAD,CAAvB;AAAA,IACIK,2BAA2B,GAAGD,SAAS,CAACC,2BAD5C;AAAA,IAEIC,oBAAoB,GAAGF,SAAS,CAACE,oBAFrC;;AAIA,IAAIC,SAAS,GAAGP,OAAO,CAAC,mBAAD,CAAvB;AAAA,IACIQ,OAAO,GAAGD,SAAS,CAACC,OADxB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,yBAAT,CAAmCC,OAAnC,EAA4CC,SAA5C,EAAuDC,WAAvD,EAAoE;AAClE,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEN,OAAjF;AACA,MAAIS,SAAS,GAAGP,OAAO,CAACO,SAAxB;AACA,MAAIC,kBAAkB,GAAGf,qBAAqB,CAACc,SAAD,EAAYP,OAAO,CAACS,MAAR,CAAeC,iBAA3B,EAA8CT,SAA9C,CAA9C;AACA,MAAIU,iBAAiB,GAAGC,uBAAuB,CAACZ,OAAD,EAAUQ,kBAAV,EAA8BN,WAA9B,CAA/C;AACA,MAAIW,mBAAmB,GAAG;AACxBC,IAAAA,QAAQ,EAAElB,oBAAoB,CAACI,OAAO,CAACc,QAAT,EAAmBX,MAAnB,EAA2BK,kBAA3B,EAA+CG,iBAA/C,CADN;AAExBX,IAAAA,OAAO,EAAEW,iBAFe;AAGxBI,IAAAA,IAAI,EAAEpB,2BAA2B,CAACY,SAAD,EAAYJ,MAAZ,EAAoBK,kBAApB;AAHT,GAA1B;;AAMA,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcP,mBAAmB,CAACC,QAAlC;AACAK,IAAAA,MAAM,CAACC,MAAP,CAAcP,mBAAmB,CAACE,IAAlC;AACAI,IAAAA,MAAM,CAACC,MAAP,CAAcP,mBAAd;AACD;;AAED,SAAOA,mBAAP;AACD;;AAED,SAASD,uBAAT,CAAiCZ,OAAjC,EAA0CC,SAA1C,EAAqDC,WAArD,EAAkE;AAChE,MAAIS,iBAAiB,GAAG;AACtBU,IAAAA,UAAU,EAAE9B,oBAAoB,CAACS,OAAO,CAACS,MAAT,EAAiBR,SAAjB,CADV;AAEtBqB,IAAAA,IAAI,EAAEtB,OAFgB;AAGtBC,IAAAA,SAAS,EAAEA,SAHW;AAItBC,IAAAA,WAAW,EAAEA;AAJS,GAAxB;;AAOA,MAAIc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC7B,IAAAA,UAAU,CAACY,SAAD,CAAV;AACAkB,IAAAA,MAAM,CAACC,MAAP,CAAcpB,OAAd;AACAmB,IAAAA,MAAM,CAACC,MAAP,CAAcT,iBAAd;AACD;;AAED,SAAOA,iBAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,yBAAyB,EAAEA,yBADZ;AAEfa,EAAAA,uBAAuB,EAAEA;AAFV,CAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar deepFreeze = require('../util/deepFreeze');\n\nvar getRequestIdentifier = require('../util/getRequestIdentifier');\n\nvar _require = require('./RelayConcreteVariables'),\n    getOperationVariables = _require.getOperationVariables;\n\nvar _require2 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require2.createNormalizationSelector,\n    createReaderSelector = _require2.createReaderSelector;\n\nvar _require3 = require('./RelayStoreUtils'),\n    ROOT_ID = _require3.ROOT_ID;\n/**\n * Creates an instance of the `OperationDescriptor` type defined in\n * `RelayStoreTypes` given an operation and some variables. The input variables\n * are filtered to exclude variables that do not match defined arguments on the\n * operation, and default values are populated for null values.\n */\n\n\nfunction createOperationDescriptor(request, variables, cacheConfig) {\n  var dataID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_ID;\n  var operation = request.operation;\n  var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);\n  var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);\n  var operationDescriptor = {\n    fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),\n    request: requestDescriptor,\n    root: createNormalizationSelector(operation, dataID, operationVariables)\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Freezing properties short-circuits a deepFreeze of snapshots that contain\n    // an OperationDescriptor via their selector's owner, avoiding stack\n    // overflow on larger queries.\n    Object.freeze(operationDescriptor.fragment);\n    Object.freeze(operationDescriptor.root);\n    Object.freeze(operationDescriptor);\n  }\n\n  return operationDescriptor;\n}\n\nfunction createRequestDescriptor(request, variables, cacheConfig) {\n  var requestDescriptor = {\n    identifier: getRequestIdentifier(request.params, variables),\n    node: request,\n    variables: variables,\n    cacheConfig: cacheConfig\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    deepFreeze(variables);\n    Object.freeze(request);\n    Object.freeze(requestDescriptor);\n  }\n\n  return requestDescriptor;\n}\n\nmodule.exports = {\n  createOperationDescriptor: createOperationDescriptor,\n  createRequestDescriptor: createRequestDescriptor\n};"]},"metadata":{},"sourceType":"script"}