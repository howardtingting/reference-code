{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../util/RelayConcreteNode'),\n    SCALAR_FIELD = _require.SCALAR_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original scalar\n * field (on which the handle was declared) among the sibling `selections`.\n */\n\n\nfunction cloneRelayScalarHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === SCALAR_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === SCALAR_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayScalarHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'ScalarField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null\n  };\n}\n\nmodule.exports = cloneRelayScalarHandleSourceField;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js"],"names":["_require","require","SCALAR_FIELD","_require2","getHandleStorageKey","areEqual","invariant","cloneRelayScalarHandleSourceField","handleField","selections","variables","sourceField","find","source","kind","name","alias","args","process","env","NODE_ENV","handle","handleKey","storageKey","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,2BAAD,CAAtB;AAAA,IACIC,YAAY,GAAGF,QAAQ,CAACE,YAD5B;;AAGA,IAAIC,SAAS,GAAGF,OAAO,CAAC,mBAAD,CAAvB;AAAA,IACIG,mBAAmB,GAAGD,SAAS,CAACC,mBADpC;;AAGA,IAAIC,QAAQ,GAAGJ,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,WAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASM,iCAAT,CAA2CC,WAA3C,EAAwDC,UAAxD,EAAoEC,SAApE,EAA+E;AAC7E,MAAIC,WAAW,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAAUC,MAAV,EAAkB;AAClD,WAAOA,MAAM,CAACC,IAAP,KAAgBZ,YAAhB,IAAgCW,MAAM,CAACE,IAAP,KAAgBP,WAAW,CAACO,IAA5D,IAAoEF,MAAM,CAACG,KAAP,KAAiBR,WAAW,CAACQ,KAAjG,IAA0GX,QAAQ,CAACQ,MAAM,CAACI,IAAR,EAAcT,WAAW,CAACS,IAA1B,CAAzH;AACD,GAFiB,CAAlB;AAGA,IAAEN,WAAW,IAAIA,WAAW,CAACG,IAAZ,KAAqBZ,YAAtC,IAAsDgB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,SAAS,CAAC,KAAD,EAAQ,kFAAkF,cAA1F,EAA0GE,WAAW,CAACa,MAAtH,CAAjD,GAAiLf,SAAS,CAAC,KAAD,CAAhP,GAA0P,KAAK,CAA/P;AACA,MAAIgB,SAAS,GAAGlB,mBAAmB,CAACI,WAAD,EAAcE,SAAd,CAAnC;AACA,SAAO;AACLI,IAAAA,IAAI,EAAE,aADD;AAELE,IAAAA,KAAK,EAAEL,WAAW,CAACK,KAFd;AAGLD,IAAAA,IAAI,EAAEO,SAHD;AAILC,IAAAA,UAAU,EAAED,SAJP;AAKLL,IAAAA,IAAI,EAAE;AALD,GAAP;AAOD;;AAEDO,MAAM,CAACC,OAAP,GAAiBlB,iCAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../util/RelayConcreteNode'),\n    SCALAR_FIELD = _require.SCALAR_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original scalar\n * field (on which the handle was declared) among the sibling `selections`.\n */\n\n\nfunction cloneRelayScalarHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === SCALAR_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === SCALAR_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayScalarHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'ScalarField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null\n  };\n}\n\nmodule.exports = cloneRelayScalarHandleSourceField;"]},"metadata":{},"sourceType":"script"}