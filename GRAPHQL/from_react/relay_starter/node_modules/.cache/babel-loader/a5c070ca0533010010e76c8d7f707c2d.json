{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar invariant = require('invariant');\n\nvar RelayOperationTracker = /*#__PURE__*/function () {\n  function RelayOperationTracker() {\n    this._ownersToPendingOperations = new Map();\n    this._pendingOperationsToOwners = new Map();\n    this._ownersToPendingPromise = new Map();\n  }\n  /**\n   * Update the map of current processing operations with the set of\n   * affected owners and notify subscribers\n   */\n\n\n  var _proto = RelayOperationTracker.prototype;\n\n  _proto.update = function update(pendingOperation, affectedOwners) {\n    if (affectedOwners.size === 0) {\n      return;\n    }\n\n    var pendingOperationIdentifier = pendingOperation.identifier;\n    var newlyAffectedOwnersIdentifier = new Set();\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(affectedOwners),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var owner = _step.value;\n        var ownerIdentifier = owner.identifier;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n        if (pendingOperationsAffectingOwner != null) {\n          // In this case the `ownerIdentifier` already affected by some operations\n          // We just need to detect, is it the same operation that we already\n          // have in the list, or it's a new operation\n          if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {\n            pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);\n            newlyAffectedOwnersIdentifier.add(ownerIdentifier);\n          }\n        } else {\n          // This is a new `ownerIdentifier` that is affected by the operation\n          this._ownersToPendingOperations.set(ownerIdentifier, new Map([[pendingOperationIdentifier, pendingOperation]]));\n\n          newlyAffectedOwnersIdentifier.add(ownerIdentifier);\n        }\n      } // No new owners were affected by this operation, we may stop here\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (newlyAffectedOwnersIdentifier.size === 0) {\n      return;\n    } // But, if some owners were affected we need to add them to\n    // the `_pendingOperationsToOwners` set\n\n\n    var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || new Set();\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(newlyAffectedOwnersIdentifier),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _ownerIdentifier = _step2.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier);\n\n        ownersAffectedByPendingOperation.add(_ownerIdentifier);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);\n  }\n  /**\n   * Once pending operation is completed we need to remove it\n   * from all tracking maps\n   */\n  ;\n\n  _proto.complete = function complete(pendingOperation) {\n    var pendingOperationIdentifier = pendingOperation.identifier;\n\n    var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);\n\n    if (affectedOwnersIdentifier == null) {\n      return;\n    } // These were the owners affected only by `pendingOperationIdentifier`\n\n\n    var completedOwnersIdentifier = new Set(); // These were the owners affected by `pendingOperationIdentifier`\n    // and some other operations\n\n    var updatedOwnersIdentifier = new Set();\n\n    var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(affectedOwnersIdentifier),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var ownerIdentifier = _step3.value;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n        if (!pendingOperationsAffectingOwner) {\n          continue;\n        }\n\n        pendingOperationsAffectingOwner[\"delete\"](pendingOperationIdentifier);\n\n        if (pendingOperationsAffectingOwner.size > 0) {\n          updatedOwnersIdentifier.add(ownerIdentifier);\n        } else {\n          completedOwnersIdentifier.add(ownerIdentifier);\n        }\n      } // Complete subscriptions for all owners, affected by `pendingOperationIdentifier`\n\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(completedOwnersIdentifier),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _ownerIdentifier2 = _step4.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier2);\n\n        this._ownersToPendingOperations[\"delete\"](_ownerIdentifier2);\n      } // Update all ownerIdentifier that were updated by `pendingOperationIdentifier` but still\n      // are affected by other operations\n\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(updatedOwnersIdentifier),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _ownerIdentifier3 = _step5.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier3);\n      } // Finally, remove pending operation identifier\n\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    this._pendingOperationsToOwners[\"delete\"](pendingOperationIdentifier);\n  };\n\n  _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {\n    var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);\n\n    if (promiseEntry != null) {\n      promiseEntry.resolve();\n    }\n\n    this._ownersToPendingPromise[\"delete\"](ownerIdentifier);\n  };\n\n  _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {\n    var ownerIdentifier = owner.identifier;\n\n    var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n    if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {\n      return null;\n    }\n\n    var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);\n\n    if (cachedPromiseEntry != null) {\n      return {\n        promise: cachedPromiseEntry.promise,\n        pendingOperations: cachedPromiseEntry.pendingOperations\n      };\n    }\n\n    var resolve;\n    var promise = new Promise(function (r) {\n      resolve = r;\n    });\n    !(resolve != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayOperationTracker: Expected resolver to be defined. If you' + 'are seeing this, it is likely a bug in Relay.') : invariant(false) : void 0;\n    var pendingOperations = Array.from(pendingOperationsForOwner.values());\n\n    this._ownersToPendingPromise.set(ownerIdentifier, {\n      promise: promise,\n      resolve: resolve,\n      pendingOperations: pendingOperations\n    });\n\n    return {\n      promise: promise,\n      pendingOperations: pendingOperations\n    };\n  };\n\n  return RelayOperationTracker;\n}();\n\nmodule.exports = RelayOperationTracker;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/store/RelayOperationTracker.js"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","invariant","RelayOperationTracker","_ownersToPendingOperations","Map","_pendingOperationsToOwners","_ownersToPendingPromise","_proto","prototype","update","pendingOperation","affectedOwners","size","pendingOperationIdentifier","identifier","newlyAffectedOwnersIdentifier","Set","_iterator","_step","s","n","done","owner","value","ownerIdentifier","pendingOperationsAffectingOwner","get","has","set","add","err","e","f","ownersAffectedByPendingOperation","_iterator2","_step2","_ownerIdentifier","_resolveOwnerResolvers","complete","affectedOwnersIdentifier","completedOwnersIdentifier","updatedOwnersIdentifier","_iterator3","_step3","_iterator4","_step4","_ownerIdentifier2","_iterator5","_step5","_ownerIdentifier3","promiseEntry","resolve","getPendingOperationsAffectingOwner","pendingOperationsForOwner","cachedPromiseEntry","promise","pendingOperations","Promise","r","process","env","NODE_ENV","Array","from","values","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,2BAA2B,GAAGF,sBAAsB,CAACC,OAAO,CAAC,kDAAD,CAAR,CAAxD;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIG,qBAAqB,GAAG,aAAa,YAAY;AACnD,WAASA,qBAAT,GAAiC;AAC/B,SAAKC,0BAAL,GAAkC,IAAIC,GAAJ,EAAlC;AACA,SAAKC,0BAAL,GAAkC,IAAID,GAAJ,EAAlC;AACA,SAAKE,uBAAL,GAA+B,IAAIF,GAAJ,EAA/B;AACD;AACD;AACF;AACA;AACA;;;AAGE,MAAIG,MAAM,GAAGL,qBAAqB,CAACM,SAAnC;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,SAASA,MAAT,CAAgBC,gBAAhB,EAAkCC,cAAlC,EAAkD;AAChE,QAAIA,cAAc,CAACC,IAAf,KAAwB,CAA5B,EAA+B;AAC7B;AACD;;AAED,QAAIC,0BAA0B,GAAGH,gBAAgB,CAACI,UAAlD;AACA,QAAIC,6BAA6B,GAAG,IAAIC,GAAJ,EAApC;;AAEA,QAAIC,SAAS,GAAG,CAAC,GAAGjB,2BAA2B,CAAC,SAAD,CAA/B,EAA4CW,cAA5C,CAAhB;AAAA,QACIO,KADJ;;AAGA,QAAI;AACF,WAAKD,SAAS,CAACE,CAAV,EAAL,EAAoB,CAAC,CAACD,KAAK,GAAGD,SAAS,CAACG,CAAV,EAAT,EAAwBC,IAA7C,GAAoD;AAClD,YAAIC,KAAK,GAAGJ,KAAK,CAACK,KAAlB;AACA,YAAIC,eAAe,GAAGF,KAAK,CAACR,UAA5B;;AAEA,YAAIW,+BAA+B,GAAG,KAAKtB,0BAAL,CAAgCuB,GAAhC,CAAoCF,eAApC,CAAtC;;AAEA,YAAIC,+BAA+B,IAAI,IAAvC,EAA6C;AAC3C;AACA;AACA;AACA,cAAI,CAACA,+BAA+B,CAACE,GAAhC,CAAoCd,0BAApC,CAAL,EAAsE;AACpEY,YAAAA,+BAA+B,CAACG,GAAhC,CAAoCf,0BAApC,EAAgEH,gBAAhE;AACAK,YAAAA,6BAA6B,CAACc,GAA9B,CAAkCL,eAAlC;AACD;AACF,SARD,MAQO;AACL;AACA,eAAKrB,0BAAL,CAAgCyB,GAAhC,CAAoCJ,eAApC,EAAqD,IAAIpB,GAAJ,CAAQ,CAAC,CAACS,0BAAD,EAA6BH,gBAA7B,CAAD,CAAR,CAArD;;AAEAK,UAAAA,6BAA6B,CAACc,GAA9B,CAAkCL,eAAlC;AACD;AACF,OArBC,CAqBA;;AAEH,KAvBD,CAuBE,OAAOM,GAAP,EAAY;AACZb,MAAAA,SAAS,CAACc,CAAV,CAAYD,GAAZ;AACD,KAzBD,SAyBU;AACRb,MAAAA,SAAS,CAACe,CAAV;AACD;;AAED,QAAIjB,6BAA6B,CAACH,IAA9B,KAAuC,CAA3C,EAA8C;AAC5C;AACD,KA1C+D,CA0C9D;AACF;;;AAGA,QAAIqB,gCAAgC,GAAG,KAAK5B,0BAAL,CAAgCqB,GAAhC,CAAoCb,0BAApC,KAAmE,IAAIG,GAAJ,EAA1G;;AAEA,QAAIkB,UAAU,GAAG,CAAC,GAAGlC,2BAA2B,CAAC,SAAD,CAA/B,EAA4Ce,6BAA5C,CAAjB;AAAA,QACIoB,MADJ;;AAGA,QAAI;AACF,WAAKD,UAAU,CAACf,CAAX,EAAL,EAAqB,CAAC,CAACgB,MAAM,GAAGD,UAAU,CAACd,CAAX,EAAV,EAA0BC,IAAhD,GAAuD;AACrD,YAAIe,gBAAgB,GAAGD,MAAM,CAACZ,KAA9B;;AAEA,aAAKc,sBAAL,CAA4BD,gBAA5B;;AAEAH,QAAAA,gCAAgC,CAACJ,GAAjC,CAAqCO,gBAArC;AACD;AACF,KARD,CAQE,OAAON,GAAP,EAAY;AACZI,MAAAA,UAAU,CAACH,CAAX,CAAaD,GAAb;AACD,KAVD,SAUU;AACRI,MAAAA,UAAU,CAACF,CAAX;AACD;;AAED,SAAK3B,0BAAL,CAAgCuB,GAAhC,CAAoCf,0BAApC,EAAgEoB,gCAAhE;AACD;AACD;AACF;AACA;AACA;AAtEE;;AAyEA1B,EAAAA,MAAM,CAAC+B,QAAP,GAAkB,SAASA,QAAT,CAAkB5B,gBAAlB,EAAoC;AACpD,QAAIG,0BAA0B,GAAGH,gBAAgB,CAACI,UAAlD;;AAEA,QAAIyB,wBAAwB,GAAG,KAAKlC,0BAAL,CAAgCqB,GAAhC,CAAoCb,0BAApC,CAA/B;;AAEA,QAAI0B,wBAAwB,IAAI,IAAhC,EAAsC;AACpC;AACD,KAPmD,CAOlD;;;AAGF,QAAIC,yBAAyB,GAAG,IAAIxB,GAAJ,EAAhC,CAVoD,CAUT;AAC3C;;AAEA,QAAIyB,uBAAuB,GAAG,IAAIzB,GAAJ,EAA9B;;AAEA,QAAI0B,UAAU,GAAG,CAAC,GAAG1C,2BAA2B,CAAC,SAAD,CAA/B,EAA4CuC,wBAA5C,CAAjB;AAAA,QACII,MADJ;;AAGA,QAAI;AACF,WAAKD,UAAU,CAACvB,CAAX,EAAL,EAAqB,CAAC,CAACwB,MAAM,GAAGD,UAAU,CAACtB,CAAX,EAAV,EAA0BC,IAAhD,GAAuD;AACrD,YAAIG,eAAe,GAAGmB,MAAM,CAACpB,KAA7B;;AAEA,YAAIE,+BAA+B,GAAG,KAAKtB,0BAAL,CAAgCuB,GAAhC,CAAoCF,eAApC,CAAtC;;AAEA,YAAI,CAACC,+BAAL,EAAsC;AACpC;AACD;;AAEDA,QAAAA,+BAA+B,CAAC,QAAD,CAA/B,CAA0CZ,0BAA1C;;AAEA,YAAIY,+BAA+B,CAACb,IAAhC,GAAuC,CAA3C,EAA8C;AAC5C6B,UAAAA,uBAAuB,CAACZ,GAAxB,CAA4BL,eAA5B;AACD,SAFD,MAEO;AACLgB,UAAAA,yBAAyB,CAACX,GAA1B,CAA8BL,eAA9B;AACD;AACF,OAjBC,CAiBA;;AAEH,KAnBD,CAmBE,OAAOM,GAAP,EAAY;AACZY,MAAAA,UAAU,CAACX,CAAX,CAAaD,GAAb;AACD,KArBD,SAqBU;AACRY,MAAAA,UAAU,CAACV,CAAX;AACD;;AAED,QAAIY,UAAU,GAAG,CAAC,GAAG5C,2BAA2B,CAAC,SAAD,CAA/B,EAA4CwC,yBAA5C,CAAjB;AAAA,QACIK,MADJ;;AAGA,QAAI;AACF,WAAKD,UAAU,CAACzB,CAAX,EAAL,EAAqB,CAAC,CAAC0B,MAAM,GAAGD,UAAU,CAACxB,CAAX,EAAV,EAA0BC,IAAhD,GAAuD;AACrD,YAAIyB,iBAAiB,GAAGD,MAAM,CAACtB,KAA/B;;AAEA,aAAKc,sBAAL,CAA4BS,iBAA5B;;AAEA,aAAK3C,0BAAL,CAAgC,QAAhC,EAA0C2C,iBAA1C;AACD,OAPC,CAOA;AACF;;AAED,KAVD,CAUE,OAAOhB,GAAP,EAAY;AACZc,MAAAA,UAAU,CAACb,CAAX,CAAaD,GAAb;AACD,KAZD,SAYU;AACRc,MAAAA,UAAU,CAACZ,CAAX;AACD;;AAED,QAAIe,UAAU,GAAG,CAAC,GAAG/C,2BAA2B,CAAC,SAAD,CAA/B,EAA4CyC,uBAA5C,CAAjB;AAAA,QACIO,MADJ;;AAGA,QAAI;AACF,WAAKD,UAAU,CAAC5B,CAAX,EAAL,EAAqB,CAAC,CAAC6B,MAAM,GAAGD,UAAU,CAAC3B,CAAX,EAAV,EAA0BC,IAAhD,GAAuD;AACrD,YAAI4B,iBAAiB,GAAGD,MAAM,CAACzB,KAA/B;;AAEA,aAAKc,sBAAL,CAA4BY,iBAA5B;AACD,OALC,CAKA;;AAEH,KAPD,CAOE,OAAOnB,GAAP,EAAY;AACZiB,MAAAA,UAAU,CAAChB,CAAX,CAAaD,GAAb;AACD,KATD,SASU;AACRiB,MAAAA,UAAU,CAACf,CAAX;AACD;;AAED,SAAK3B,0BAAL,CAAgC,QAAhC,EAA0CQ,0BAA1C;AACD,GA/ED;;AAiFAN,EAAAA,MAAM,CAAC8B,sBAAP,GAAgC,SAASA,sBAAT,CAAgCb,eAAhC,EAAiD;AAC/E,QAAI0B,YAAY,GAAG,KAAK5C,uBAAL,CAA6BoB,GAA7B,CAAiCF,eAAjC,CAAnB;;AAEA,QAAI0B,YAAY,IAAI,IAApB,EAA0B;AACxBA,MAAAA,YAAY,CAACC,OAAb;AACD;;AAED,SAAK7C,uBAAL,CAA6B,QAA7B,EAAuCkB,eAAvC;AACD,GARD;;AAUAjB,EAAAA,MAAM,CAAC6C,kCAAP,GAA4C,SAASA,kCAAT,CAA4C9B,KAA5C,EAAmD;AAC7F,QAAIE,eAAe,GAAGF,KAAK,CAACR,UAA5B;;AAEA,QAAIuC,yBAAyB,GAAG,KAAKlD,0BAAL,CAAgCuB,GAAhC,CAAoCF,eAApC,CAAhC;;AAEA,QAAI6B,yBAAyB,IAAI,IAA7B,IAAqCA,yBAAyB,CAACzC,IAA1B,KAAmC,CAA5E,EAA+E;AAC7E,aAAO,IAAP;AACD;;AAED,QAAI0C,kBAAkB,GAAG,KAAKhD,uBAAL,CAA6BoB,GAA7B,CAAiCF,eAAjC,CAAzB;;AAEA,QAAI8B,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,aAAO;AACLC,QAAAA,OAAO,EAAED,kBAAkB,CAACC,OADvB;AAELC,QAAAA,iBAAiB,EAAEF,kBAAkB,CAACE;AAFjC,OAAP;AAID;;AAED,QAAIL,OAAJ;AACA,QAAII,OAAO,GAAG,IAAIE,OAAJ,CAAY,UAAUC,CAAV,EAAa;AACrCP,MAAAA,OAAO,GAAGO,CAAV;AACD,KAFa,CAAd;AAGA,MAAEP,OAAO,IAAI,IAAb,IAAqBQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC5D,SAAS,CAAC,KAAD,EAAQ,mEAAmE,+CAA3E,CAAjD,GAA+KA,SAAS,CAAC,KAAD,CAA7M,GAAuN,KAAK,CAA5N;AACA,QAAIuD,iBAAiB,GAAGM,KAAK,CAACC,IAAN,CAAWV,yBAAyB,CAACW,MAA1B,EAAX,CAAxB;;AAEA,SAAK1D,uBAAL,CAA6BsB,GAA7B,CAAiCJ,eAAjC,EAAkD;AAChD+B,MAAAA,OAAO,EAAEA,OADuC;AAEhDJ,MAAAA,OAAO,EAAEA,OAFuC;AAGhDK,MAAAA,iBAAiB,EAAEA;AAH6B,KAAlD;;AAMA,WAAO;AACLD,MAAAA,OAAO,EAAEA,OADJ;AAELC,MAAAA,iBAAiB,EAAEA;AAFd,KAAP;AAID,GAnCD;;AAqCA,SAAOtD,qBAAP;AACD,CAxNwC,EAAzC;;AA0NA+D,MAAM,CAACC,OAAP,GAAiBhE,qBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar invariant = require('invariant');\n\nvar RelayOperationTracker = /*#__PURE__*/function () {\n  function RelayOperationTracker() {\n    this._ownersToPendingOperations = new Map();\n    this._pendingOperationsToOwners = new Map();\n    this._ownersToPendingPromise = new Map();\n  }\n  /**\n   * Update the map of current processing operations with the set of\n   * affected owners and notify subscribers\n   */\n\n\n  var _proto = RelayOperationTracker.prototype;\n\n  _proto.update = function update(pendingOperation, affectedOwners) {\n    if (affectedOwners.size === 0) {\n      return;\n    }\n\n    var pendingOperationIdentifier = pendingOperation.identifier;\n    var newlyAffectedOwnersIdentifier = new Set();\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(affectedOwners),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var owner = _step.value;\n        var ownerIdentifier = owner.identifier;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n        if (pendingOperationsAffectingOwner != null) {\n          // In this case the `ownerIdentifier` already affected by some operations\n          // We just need to detect, is it the same operation that we already\n          // have in the list, or it's a new operation\n          if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {\n            pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);\n            newlyAffectedOwnersIdentifier.add(ownerIdentifier);\n          }\n        } else {\n          // This is a new `ownerIdentifier` that is affected by the operation\n          this._ownersToPendingOperations.set(ownerIdentifier, new Map([[pendingOperationIdentifier, pendingOperation]]));\n\n          newlyAffectedOwnersIdentifier.add(ownerIdentifier);\n        }\n      } // No new owners were affected by this operation, we may stop here\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (newlyAffectedOwnersIdentifier.size === 0) {\n      return;\n    } // But, if some owners were affected we need to add them to\n    // the `_pendingOperationsToOwners` set\n\n\n    var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || new Set();\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(newlyAffectedOwnersIdentifier),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _ownerIdentifier = _step2.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier);\n\n        ownersAffectedByPendingOperation.add(_ownerIdentifier);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);\n  }\n  /**\n   * Once pending operation is completed we need to remove it\n   * from all tracking maps\n   */\n  ;\n\n  _proto.complete = function complete(pendingOperation) {\n    var pendingOperationIdentifier = pendingOperation.identifier;\n\n    var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);\n\n    if (affectedOwnersIdentifier == null) {\n      return;\n    } // These were the owners affected only by `pendingOperationIdentifier`\n\n\n    var completedOwnersIdentifier = new Set(); // These were the owners affected by `pendingOperationIdentifier`\n    // and some other operations\n\n    var updatedOwnersIdentifier = new Set();\n\n    var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(affectedOwnersIdentifier),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var ownerIdentifier = _step3.value;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n        if (!pendingOperationsAffectingOwner) {\n          continue;\n        }\n\n        pendingOperationsAffectingOwner[\"delete\"](pendingOperationIdentifier);\n\n        if (pendingOperationsAffectingOwner.size > 0) {\n          updatedOwnersIdentifier.add(ownerIdentifier);\n        } else {\n          completedOwnersIdentifier.add(ownerIdentifier);\n        }\n      } // Complete subscriptions for all owners, affected by `pendingOperationIdentifier`\n\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(completedOwnersIdentifier),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _ownerIdentifier2 = _step4.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier2);\n\n        this._ownersToPendingOperations[\"delete\"](_ownerIdentifier2);\n      } // Update all ownerIdentifier that were updated by `pendingOperationIdentifier` but still\n      // are affected by other operations\n\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(updatedOwnersIdentifier),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _ownerIdentifier3 = _step5.value;\n\n        this._resolveOwnerResolvers(_ownerIdentifier3);\n      } // Finally, remove pending operation identifier\n\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    this._pendingOperationsToOwners[\"delete\"](pendingOperationIdentifier);\n  };\n\n  _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {\n    var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);\n\n    if (promiseEntry != null) {\n      promiseEntry.resolve();\n    }\n\n    this._ownersToPendingPromise[\"delete\"](ownerIdentifier);\n  };\n\n  _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {\n    var ownerIdentifier = owner.identifier;\n\n    var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);\n\n    if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {\n      return null;\n    }\n\n    var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);\n\n    if (cachedPromiseEntry != null) {\n      return {\n        promise: cachedPromiseEntry.promise,\n        pendingOperations: cachedPromiseEntry.pendingOperations\n      };\n    }\n\n    var resolve;\n    var promise = new Promise(function (r) {\n      resolve = r;\n    });\n    !(resolve != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayOperationTracker: Expected resolver to be defined. If you' + 'are seeing this, it is likely a bug in Relay.') : invariant(false) : void 0;\n    var pendingOperations = Array.from(pendingOperationsForOwner.values());\n\n    this._ownersToPendingPromise.set(ownerIdentifier, {\n      promise: promise,\n      resolve: resolve,\n      pendingOperations: pendingOperations\n    });\n\n    return {\n      promise: promise,\n      pendingOperations: pendingOperations\n    };\n  };\n\n  return RelayOperationTracker;\n}();\n\nmodule.exports = RelayOperationTracker;"]},"metadata":{},"sourceType":"script"}