{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n/**\n * Represents a common GraphQL request that can be executed, an `operation`\n * containing information to normalize the results, and a `fragment` derived\n * from that operation to read the response data (masking data from child\n * fragments).\n */\n\n/**\n * Contains the parameters required for executing a GraphQL request.\n * The operation can either be provided as a persisted `id` or `text`. If given\n * in `text` format, a `cacheID` as a hash of the text should be set to be used\n * for local caching.\n */\n\nvar RelayConcreteNode = {\n  ACTOR_CHANGE: 'ActorChange',\n  CONDITION: 'Condition',\n  CLIENT_COMPONENT: 'ClientComponent',\n  CLIENT_EDGE: 'ClientEdge',\n  CLIENT_EXTENSION: 'ClientExtension',\n  DEFER: 'Defer',\n  CONNECTION: 'Connection',\n  FLIGHT_FIELD: 'FlightField',\n  FRAGMENT: 'Fragment',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',\n  INLINE_DATA_FRAGMENT: 'InlineDataFragment',\n  INLINE_FRAGMENT: 'InlineFragment',\n  LINKED_FIELD: 'LinkedField',\n  LINKED_HANDLE: 'LinkedHandle',\n  LITERAL: 'Literal',\n  LIST_VALUE: 'ListValue',\n  LOCAL_ARGUMENT: 'LocalArgument',\n  MODULE_IMPORT: 'ModuleImport',\n  RELAY_RESOLVER: 'RelayResolver',\n  REQUIRED_FIELD: 'RequiredField',\n  OBJECT_VALUE: 'ObjectValue',\n  OPERATION: 'Operation',\n  REQUEST: 'Request',\n  ROOT_ARGUMENT: 'RootArgument',\n  SCALAR_FIELD: 'ScalarField',\n  SCALAR_HANDLE: 'ScalarHandle',\n  SPLIT_OPERATION: 'SplitOperation',\n  STREAM: 'Stream',\n  TYPE_DISCRIMINATOR: 'TypeDiscriminator',\n  VARIABLE: 'Variable'\n};\nmodule.exports = RelayConcreteNode;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"],"names":["RelayConcreteNode","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EDGE","CLIENT_EXTENSION","DEFER","CONNECTION","FLIGHT_FIELD","FRAGMENT","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","LITERAL","LIST_VALUE","LOCAL_ARGUMENT","MODULE_IMPORT","RELAY_RESOLVER","REQUIRED_FIELD","OBJECT_VALUE","OPERATION","REQUEST","ROOT_ARGUMENT","SCALAR_FIELD","SCALAR_HANDLE","SPLIT_OPERATION","STREAM","TYPE_DISCRIMINATOR","VARIABLE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,iBAAiB,GAAG;AACtBC,EAAAA,YAAY,EAAE,aADQ;AAEtBC,EAAAA,SAAS,EAAE,WAFW;AAGtBC,EAAAA,gBAAgB,EAAE,iBAHI;AAItBC,EAAAA,WAAW,EAAE,YAJS;AAKtBC,EAAAA,gBAAgB,EAAE,iBALI;AAMtBC,EAAAA,KAAK,EAAE,OANe;AAOtBC,EAAAA,UAAU,EAAE,YAPU;AAQtBC,EAAAA,YAAY,EAAE,aARQ;AAStBC,EAAAA,QAAQ,EAAE,UATY;AAUtBC,EAAAA,eAAe,EAAE,gBAVK;AAWtBC,EAAAA,2BAA2B,EAAE,0BAXP;AAYtBC,EAAAA,oBAAoB,EAAE,oBAZA;AAatBC,EAAAA,eAAe,EAAE,gBAbK;AActBC,EAAAA,YAAY,EAAE,aAdQ;AAetBC,EAAAA,aAAa,EAAE,cAfO;AAgBtBC,EAAAA,OAAO,EAAE,SAhBa;AAiBtBC,EAAAA,UAAU,EAAE,WAjBU;AAkBtBC,EAAAA,cAAc,EAAE,eAlBM;AAmBtBC,EAAAA,aAAa,EAAE,cAnBO;AAoBtBC,EAAAA,cAAc,EAAE,eApBM;AAqBtBC,EAAAA,cAAc,EAAE,eArBM;AAsBtBC,EAAAA,YAAY,EAAE,aAtBQ;AAuBtBC,EAAAA,SAAS,EAAE,WAvBW;AAwBtBC,EAAAA,OAAO,EAAE,SAxBa;AAyBtBC,EAAAA,aAAa,EAAE,cAzBO;AA0BtBC,EAAAA,YAAY,EAAE,aA1BQ;AA2BtBC,EAAAA,aAAa,EAAE,cA3BO;AA4BtBC,EAAAA,eAAe,EAAE,gBA5BK;AA6BtBC,EAAAA,MAAM,EAAE,QA7Bc;AA8BtBC,EAAAA,kBAAkB,EAAE,mBA9BE;AA+BtBC,EAAAA,QAAQ,EAAE;AA/BY,CAAxB;AAiCAC,MAAM,CAACC,OAAP,GAAiBjC,iBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\n/**\n * Represents a common GraphQL request that can be executed, an `operation`\n * containing information to normalize the results, and a `fragment` derived\n * from that operation to read the response data (masking data from child\n * fragments).\n */\n\n/**\n * Contains the parameters required for executing a GraphQL request.\n * The operation can either be provided as a persisted `id` or `text`. If given\n * in `text` format, a `cacheID` as a hash of the text should be set to be used\n * for local caching.\n */\nvar RelayConcreteNode = {\n  ACTOR_CHANGE: 'ActorChange',\n  CONDITION: 'Condition',\n  CLIENT_COMPONENT: 'ClientComponent',\n  CLIENT_EDGE: 'ClientEdge',\n  CLIENT_EXTENSION: 'ClientExtension',\n  DEFER: 'Defer',\n  CONNECTION: 'Connection',\n  FLIGHT_FIELD: 'FlightField',\n  FRAGMENT: 'Fragment',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',\n  INLINE_DATA_FRAGMENT: 'InlineDataFragment',\n  INLINE_FRAGMENT: 'InlineFragment',\n  LINKED_FIELD: 'LinkedField',\n  LINKED_HANDLE: 'LinkedHandle',\n  LITERAL: 'Literal',\n  LIST_VALUE: 'ListValue',\n  LOCAL_ARGUMENT: 'LocalArgument',\n  MODULE_IMPORT: 'ModuleImport',\n  RELAY_RESOLVER: 'RelayResolver',\n  REQUIRED_FIELD: 'RequiredField',\n  OBJECT_VALUE: 'ObjectValue',\n  OPERATION: 'Operation',\n  REQUEST: 'Request',\n  ROOT_ARGUMENT: 'RootArgument',\n  SCALAR_FIELD: 'ScalarField',\n  SCALAR_HANDLE: 'ScalarHandle',\n  SPLIT_OPERATION: 'SplitOperation',\n  STREAM: 'Stream',\n  TYPE_DISCRIMINATOR: 'TypeDiscriminator',\n  VARIABLE: 'Variable'\n};\nmodule.exports = RelayConcreteNode;"]},"metadata":{},"sourceType":"script"}