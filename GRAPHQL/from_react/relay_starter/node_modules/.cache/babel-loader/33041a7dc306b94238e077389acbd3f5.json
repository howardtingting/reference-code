{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('relay-runtime'),\n    fetchQuery = _require2.__internal.fetchQuery;\n\nfunction useLazyLoadQuery(gqlQuery, variables, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {\n    force: true\n  });\n  var data = useLazyLoadQueryNode({\n    componentDisplayName: 'useLazyLoadQuery()',\n    fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey,\n    fetchObservable: fetchQuery(environment, query),\n    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n    query: query,\n    renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n  });\n  return data;\n}\n\nmodule.exports = useLazyLoadQuery;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js"],"names":["_require","require","useTrackLoadQueryInRender","useLazyLoadQueryNode","useMemoOperationDescriptor","useRelayEnvironment","_require2","fetchQuery","__internal","useLazyLoadQuery","gqlQuery","variables","options","environment","query","networkCacheConfig","force","data","componentDisplayName","fetchKey","fetchObservable","fetchPolicy","renderPolicy","UNSTABLE_renderPolicy","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIC,yBAAyB,GAAGF,QAAQ,CAACE,yBADzC;;AAGA,IAAIC,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIG,0BAA0B,GAAGH,OAAO,CAAC,8BAAD,CAAxC;;AAEA,IAAII,mBAAmB,GAAGJ,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAvB;AAAA,IACIM,UAAU,GAAGD,SAAS,CAACE,UAAV,CAAqBD,UADtC;;AAGA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwD;AACtD;AACA;AACAV,EAAAA,yBAAyB;AACzB,MAAIW,WAAW,GAAGR,mBAAmB,EAArC;AACA,MAAIS,KAAK,GAAGV,0BAA0B,CAACM,QAAD,EAAWC,SAAX,EAAsBC,OAAO,IAAIA,OAAO,CAACG,kBAAnB,GAAwCH,OAAO,CAACG,kBAAhD,GAAqE;AAC/HC,IAAAA,KAAK,EAAE;AADwH,GAA3F,CAAtC;AAGA,MAAIC,IAAI,GAAGd,oBAAoB,CAAC;AAC9Be,IAAAA,oBAAoB,EAAE,oBADQ;AAE9BC,IAAAA,QAAQ,EAAEP,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACO,QAFtC;AAG9BC,IAAAA,eAAe,EAAEb,UAAU,CAACM,WAAD,EAAcC,KAAd,CAHG;AAI9BO,IAAAA,WAAW,EAAET,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACS,WAJzC;AAK9BP,IAAAA,KAAK,EAAEA,KALuB;AAM9BQ,IAAAA,YAAY,EAAEV,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACW;AAN1C,GAAD,CAA/B;AAQA,SAAON,IAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBhB,gBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('relay-runtime'),\n    fetchQuery = _require2.__internal.fetchQuery;\n\nfunction useLazyLoadQuery(gqlQuery, variables, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {\n    force: true\n  });\n  var data = useLazyLoadQueryNode({\n    componentDisplayName: 'useLazyLoadQuery()',\n    fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey,\n    fetchObservable: fetchQuery(environment, query),\n    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n    query: query,\n    renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n  });\n  return data;\n}\n\nmodule.exports = useLazyLoadQuery;"]},"metadata":{},"sourceType":"script"}