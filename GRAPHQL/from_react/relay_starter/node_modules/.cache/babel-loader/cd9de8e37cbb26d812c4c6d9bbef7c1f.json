{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/fetchQueryInternal'),\n    getPromiseForActiveRequest = _require.getPromiseForActiveRequest;\n\nfunction getPendingOperationsForFragment(environment, fragmentNode, fragmentOwner) {\n  var _pendingOperations$ma, _pendingOperations;\n\n  var pendingOperations = [];\n  var promise = getPromiseForActiveRequest(environment, fragmentOwner);\n\n  if (promise != null) {\n    pendingOperations = [fragmentOwner];\n  } else {\n    var _result$pendingOperat, _result$promise;\n\n    var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);\n    pendingOperations = (_result$pendingOperat = result === null || result === void 0 ? void 0 : result.pendingOperations) !== null && _result$pendingOperat !== void 0 ? _result$pendingOperat : [];\n    promise = (_result$promise = result === null || result === void 0 ? void 0 : result.promise) !== null && _result$promise !== void 0 ? _result$promise : null;\n  }\n\n  if (!promise) {\n    return null;\n  }\n\n  var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === void 0 ? void 0 : _pendingOperations.map(function (op) {\n    return op.node.params.name;\n  }).join(',')) !== null && _pendingOperations$ma !== void 0 ? _pendingOperations$ma : null;\n\n  if (pendingOperationName == null || pendingOperationName.length === 0) {\n    pendingOperationName = 'Unknown pending operation';\n  }\n\n  var fragmentName = fragmentNode.name;\n  var promiseDisplayName = pendingOperationName === fragmentName ? \"Relay(\".concat(pendingOperationName, \")\") : \"Relay(\".concat(pendingOperationName, \":\").concat(fragmentName, \")\"); // $FlowExpectedError[prop-missing] Expando to annotate Promises.\n\n  promise.displayName = promiseDisplayName;\n  return {\n    promise: promise,\n    pendingOperations: pendingOperations\n  };\n}\n\nmodule.exports = getPendingOperationsForFragment;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js"],"names":["_require","require","getPromiseForActiveRequest","getPendingOperationsForFragment","environment","fragmentNode","fragmentOwner","_pendingOperations$ma","_pendingOperations","pendingOperations","promise","_result$pendingOperat","_result$promise","result","getOperationTracker","getPendingOperationsAffectingOwner","pendingOperationName","map","op","node","params","name","join","length","fragmentName","promiseDisplayName","concat","displayName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,6BAAD,CAAtB;AAAA,IACIC,0BAA0B,GAAGF,QAAQ,CAACE,0BAD1C;;AAGA,SAASC,+BAAT,CAAyCC,WAAzC,EAAsDC,YAAtD,EAAoEC,aAApE,EAAmF;AACjF,MAAIC,qBAAJ,EAA2BC,kBAA3B;;AAEA,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,OAAO,GAAGR,0BAA0B,CAACE,WAAD,EAAcE,aAAd,CAAxC;;AAEA,MAAII,OAAO,IAAI,IAAf,EAAqB;AACnBD,IAAAA,iBAAiB,GAAG,CAACH,aAAD,CAApB;AACD,GAFD,MAEO;AACL,QAAIK,qBAAJ,EAA2BC,eAA3B;;AAEA,QAAIC,MAAM,GAAGT,WAAW,CAACU,mBAAZ,GAAkCC,kCAAlC,CAAqET,aAArE,CAAb;AACAG,IAAAA,iBAAiB,GAAG,CAACE,qBAAqB,GAAGE,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACJ,iBAAhF,MAAuG,IAAvG,IAA+GE,qBAAqB,KAAK,KAAK,CAA9I,GAAkJA,qBAAlJ,GAA0K,EAA9L;AACAD,IAAAA,OAAO,GAAG,CAACE,eAAe,GAAGC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACH,OAA1E,MAAuF,IAAvF,IAA+FE,eAAe,KAAK,KAAK,CAAxH,GAA4HA,eAA5H,GAA8I,IAAxJ;AACD;;AAED,MAAI,CAACF,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAIM,oBAAoB,GAAG,CAACT,qBAAqB,GAAG,CAACC,kBAAkB,GAAGC,iBAAtB,MAA6C,IAA7C,IAAqDD,kBAAkB,KAAK,KAAK,CAAjF,GAAqF,KAAK,CAA1F,GAA8FA,kBAAkB,CAACS,GAAnB,CAAuB,UAAUC,EAAV,EAAc;AACrL,WAAOA,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,IAAtB;AACD,GAFiJ,EAE/IC,IAF+I,CAE1I,GAF0I,CAAvH,MAET,IAFS,IAEDf,qBAAqB,KAAK,KAAK,CAF9B,GAEkCA,qBAFlC,GAE0D,IAFrF;;AAIA,MAAIS,oBAAoB,IAAI,IAAxB,IAAgCA,oBAAoB,CAACO,MAArB,KAAgC,CAApE,EAAuE;AACrEP,IAAAA,oBAAoB,GAAG,2BAAvB;AACD;;AAED,MAAIQ,YAAY,GAAGnB,YAAY,CAACgB,IAAhC;AACA,MAAII,kBAAkB,GAAGT,oBAAoB,KAAKQ,YAAzB,GAAwC,SAASE,MAAT,CAAgBV,oBAAhB,EAAsC,GAAtC,CAAxC,GAAqF,SAASU,MAAT,CAAgBV,oBAAhB,EAAsC,GAAtC,EAA2CU,MAA3C,CAAkDF,YAAlD,EAAgE,GAAhE,CAA9G,CA7BiF,CA6BmG;;AAEpLd,EAAAA,OAAO,CAACiB,WAAR,GAAsBF,kBAAtB;AACA,SAAO;AACLf,IAAAA,OAAO,EAAEA,OADJ;AAELD,IAAAA,iBAAiB,EAAEA;AAFd,GAAP;AAID;;AAEDmB,MAAM,CAACC,OAAP,GAAiB1B,+BAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/fetchQueryInternal'),\n    getPromiseForActiveRequest = _require.getPromiseForActiveRequest;\n\nfunction getPendingOperationsForFragment(environment, fragmentNode, fragmentOwner) {\n  var _pendingOperations$ma, _pendingOperations;\n\n  var pendingOperations = [];\n  var promise = getPromiseForActiveRequest(environment, fragmentOwner);\n\n  if (promise != null) {\n    pendingOperations = [fragmentOwner];\n  } else {\n    var _result$pendingOperat, _result$promise;\n\n    var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);\n    pendingOperations = (_result$pendingOperat = result === null || result === void 0 ? void 0 : result.pendingOperations) !== null && _result$pendingOperat !== void 0 ? _result$pendingOperat : [];\n    promise = (_result$promise = result === null || result === void 0 ? void 0 : result.promise) !== null && _result$promise !== void 0 ? _result$promise : null;\n  }\n\n  if (!promise) {\n    return null;\n  }\n\n  var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === void 0 ? void 0 : _pendingOperations.map(function (op) {\n    return op.node.params.name;\n  }).join(',')) !== null && _pendingOperations$ma !== void 0 ? _pendingOperations$ma : null;\n\n  if (pendingOperationName == null || pendingOperationName.length === 0) {\n    pendingOperationName = 'Unknown pending operation';\n  }\n\n  var fragmentName = fragmentNode.name;\n  var promiseDisplayName = pendingOperationName === fragmentName ? \"Relay(\".concat(pendingOperationName, \")\") : \"Relay(\".concat(pendingOperationName, \":\").concat(fragmentName, \")\"); // $FlowExpectedError[prop-missing] Expando to annotate Promises.\n\n  promise.displayName = promiseDisplayName;\n  return {\n    promise: promise,\n    pendingOperations: pendingOperations\n  };\n}\n\nmodule.exports = getPendingOperationsForFragment;"]},"metadata":{},"sourceType":"script"}