{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ITERATOR_KEY = Symbol.iterator;\n\nfunction hasOverlappingIDs(seenRecords, updatedRecordIDs) {\n  // $FlowFixMe: Set is an iterable type, accessing its iterator is allowed.\n  var iterator = seenRecords[ITERATOR_KEY]();\n  var next = iterator.next();\n\n  while (!next.done) {\n    var key = next.value;\n\n    if (updatedRecordIDs.has(key)) {\n      return true;\n    }\n\n    next = iterator.next();\n  }\n\n  return false;\n}\n\nmodule.exports = hasOverlappingIDs;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/store/hasOverlappingIDs.js"],"names":["ITERATOR_KEY","Symbol","iterator","hasOverlappingIDs","seenRecords","updatedRecordIDs","next","done","key","value","has","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,YAAY,GAAGC,MAAM,CAACC,QAA1B;;AAEA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,gBAAxC,EAA0D;AACxD;AACA,MAAIH,QAAQ,GAAGE,WAAW,CAACJ,YAAD,CAAX,EAAf;AACA,MAAIM,IAAI,GAAGJ,QAAQ,CAACI,IAAT,EAAX;;AAEA,SAAO,CAACA,IAAI,CAACC,IAAb,EAAmB;AACjB,QAAIC,GAAG,GAAGF,IAAI,CAACG,KAAf;;AAEA,QAAIJ,gBAAgB,CAACK,GAAjB,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B,aAAO,IAAP;AACD;;AAEDF,IAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAT,EAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBT,iBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ITERATOR_KEY = Symbol.iterator;\n\nfunction hasOverlappingIDs(seenRecords, updatedRecordIDs) {\n  // $FlowFixMe: Set is an iterable type, accessing its iterator is allowed.\n  var iterator = seenRecords[ITERATOR_KEY]();\n  var next = iterator.next();\n\n  while (!next.done) {\n    var key = next.value;\n\n    if (updatedRecordIDs.has(key)) {\n      return true;\n    }\n\n    next = iterator.next();\n  }\n\n  return false;\n}\n\nmodule.exports = hasOverlappingIDs;"]},"metadata":{},"sourceType":"script"}