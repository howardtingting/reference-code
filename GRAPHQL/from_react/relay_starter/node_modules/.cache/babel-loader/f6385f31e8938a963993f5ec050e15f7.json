{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar generateID = require('../util/generateID');\n/**\n * Wraps the network with logging to ensure that network requests are\n * always logged. Relying on each network callsite to be wrapped is\n * untenable and will eventually lead to holes in the logging.\n * NOTE: This function takes an environment instance, because Relay\n * devtools will mutate the `env.__log` method, and the devtools rely\n * on it to receive network events.\n */\n\n\nfunction wrapNetworkWithLogObserver(env, network) {\n  return {\n    execute: function execute(params, variables, cacheConfig, uploadables) {\n      var networkRequestId = generateID();\n      var logObserver = {\n        start: function start(subscription) {\n          env.__log({\n            name: 'network.start',\n            networkRequestId: networkRequestId,\n            params: params,\n            variables: variables,\n            cacheConfig: cacheConfig\n          });\n        },\n        next: function next(response) {\n          env.__log({\n            name: 'network.next',\n            networkRequestId: networkRequestId,\n            response: response\n          });\n        },\n        error: function error(_error) {\n          env.__log({\n            name: 'network.error',\n            networkRequestId: networkRequestId,\n            error: _error\n          });\n        },\n        complete: function complete() {\n          env.__log({\n            name: 'network.complete',\n            networkRequestId: networkRequestId\n          });\n        },\n        unsubscribe: function unsubscribe() {\n          env.__log({\n            name: 'network.unsubscribe',\n            networkRequestId: networkRequestId\n          });\n        }\n      };\n\n      var logRequestInfo = function logRequestInfo(info) {\n        env.__log({\n          name: 'network.info',\n          networkRequestId: networkRequestId,\n          info: info\n        });\n      };\n\n      return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)[\"do\"](logObserver);\n    }\n  };\n}\n\nmodule.exports = wrapNetworkWithLogObserver;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js"],"names":["generateID","require","wrapNetworkWithLogObserver","env","network","execute","params","variables","cacheConfig","uploadables","networkRequestId","logObserver","start","subscription","__log","name","next","response","error","_error","complete","unsubscribe","logRequestInfo","info","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,0BAAT,CAAoCC,GAApC,EAAyCC,OAAzC,EAAkD;AAChD,SAAO;AACLC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,WAAjD,EAA8D;AACrE,UAAIC,gBAAgB,GAAGV,UAAU,EAAjC;AACA,UAAIW,WAAW,GAAG;AAChBC,QAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,YAAf,EAA6B;AAClCV,UAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,YAAAA,IAAI,EAAE,eADE;AAERL,YAAAA,gBAAgB,EAAEA,gBAFV;AAGRJ,YAAAA,MAAM,EAAEA,MAHA;AAIRC,YAAAA,SAAS,EAAEA,SAJH;AAKRC,YAAAA,WAAW,EAAEA;AALL,WAAV;AAOD,SATe;AAUhBQ,QAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,QAAd,EAAwB;AAC5Bd,UAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,YAAAA,IAAI,EAAE,cADE;AAERL,YAAAA,gBAAgB,EAAEA,gBAFV;AAGRO,YAAAA,QAAQ,EAAEA;AAHF,WAAV;AAKD,SAhBe;AAiBhBC,QAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,MAAf,EAAuB;AAC5BhB,UAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,YAAAA,IAAI,EAAE,eADE;AAERL,YAAAA,gBAAgB,EAAEA,gBAFV;AAGRQ,YAAAA,KAAK,EAAEC;AAHC,WAAV;AAKD,SAvBe;AAwBhBC,QAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5BjB,UAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,YAAAA,IAAI,EAAE,kBADE;AAERL,YAAAA,gBAAgB,EAAEA;AAFV,WAAV;AAID,SA7Be;AA8BhBW,QAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClClB,UAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,YAAAA,IAAI,EAAE,qBADE;AAERL,YAAAA,gBAAgB,EAAEA;AAFV,WAAV;AAID;AAnCe,OAAlB;;AAsCA,UAAIY,cAAc,GAAG,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjDpB,QAAAA,GAAG,CAACW,KAAJ,CAAU;AACRC,UAAAA,IAAI,EAAE,cADE;AAERL,UAAAA,gBAAgB,EAAEA,gBAFV;AAGRa,UAAAA,IAAI,EAAEA;AAHE,SAAV;AAKD,OAND;;AAQA,aAAOnB,OAAO,CAACC,OAAR,CAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,WAAhD,EAA6Da,cAA7D,EAA6E,IAA7E,EAAmFX,WAAnF,CAAP;AACD;AAlDI,GAAP;AAoDD;;AAEDa,MAAM,CAACC,OAAP,GAAiBvB,0BAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar generateID = require('../util/generateID');\n/**\n * Wraps the network with logging to ensure that network requests are\n * always logged. Relying on each network callsite to be wrapped is\n * untenable and will eventually lead to holes in the logging.\n * NOTE: This function takes an environment instance, because Relay\n * devtools will mutate the `env.__log` method, and the devtools rely\n * on it to receive network events.\n */\n\n\nfunction wrapNetworkWithLogObserver(env, network) {\n  return {\n    execute: function execute(params, variables, cacheConfig, uploadables) {\n      var networkRequestId = generateID();\n      var logObserver = {\n        start: function start(subscription) {\n          env.__log({\n            name: 'network.start',\n            networkRequestId: networkRequestId,\n            params: params,\n            variables: variables,\n            cacheConfig: cacheConfig\n          });\n        },\n        next: function next(response) {\n          env.__log({\n            name: 'network.next',\n            networkRequestId: networkRequestId,\n            response: response\n          });\n        },\n        error: function error(_error) {\n          env.__log({\n            name: 'network.error',\n            networkRequestId: networkRequestId,\n            error: _error\n          });\n        },\n        complete: function complete() {\n          env.__log({\n            name: 'network.complete',\n            networkRequestId: networkRequestId\n          });\n        },\n        unsubscribe: function unsubscribe() {\n          env.__log({\n            name: 'network.unsubscribe',\n            networkRequestId: networkRequestId\n          });\n        }\n      };\n\n      var logRequestInfo = function logRequestInfo(info) {\n        env.__log({\n          name: 'network.info',\n          networkRequestId: networkRequestId,\n          info: info\n        });\n      };\n\n      return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)[\"do\"](logObserver);\n    }\n  };\n}\n\nmodule.exports = wrapNetworkWithLogObserver;"]},"metadata":{},"sourceType":"script"}