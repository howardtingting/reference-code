{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ProfilerContext = require('./ProfilerContext');\n\nvar _require = require('./QueryResource'),\n    getQueryCacheIdentifier = _require.getQueryCacheIdentifier,\n    getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;\n\nvar useFetchTrackingRef = require('./useFetchTrackingRef');\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar React = require('react');\n\nvar useContext = React.useContext,\n    useEffect = React.useEffect,\n    useState = React.useState,\n    useRef = React.useRef;\n\nfunction useLazyLoadQueryNode(_ref) {\n  var query = _ref.query,\n      componentDisplayName = _ref.componentDisplayName,\n      fetchObservable = _ref.fetchObservable,\n      fetchPolicy = _ref.fetchPolicy,\n      fetchKey = _ref.fetchKey,\n      renderPolicy = _ref.renderPolicy;\n  var environment = useRelayEnvironment();\n  var profilerContext = useContext(ProfilerContext);\n  var QueryResource = getQueryResourceForEnvironment(environment);\n\n  var _useState = useState(0),\n      forceUpdateKey = _useState[0],\n      forceUpdate = _useState[1];\n\n  var _useFetchTrackingRef = useFetchTrackingRef(),\n      startFetch = _useFetchTrackingRef.startFetch,\n      completeFetch = _useFetchTrackingRef.completeFetch;\n\n  var cacheBreaker = \"\".concat(forceUpdateKey, \"-\").concat(fetchKey !== null && fetchKey !== void 0 ? fetchKey : '');\n  var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);\n  var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function () {\n    return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {\n      start: startFetch,\n      complete: completeFetch,\n      error: completeFetch\n    }, profilerContext);\n  });\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current cached resource will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly attempt to\n      // retain a cached query resource that was disposed, we need to force\n      // a re-render so that the cache entry for this query is re-intiliazed and\n      // and re-evaluated (and potentially cause a refetch).\n      maybeHiddenOrFastRefresh.current = false;\n      forceUpdate(function (n) {\n        return n + 1;\n      });\n      return;\n    }\n\n    var disposable = QueryResource.retain(preparedQueryResult, profilerContext);\n    return function () {\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because the `environment`\n    // and `cacheIdentifier` identities are capturing all information about whether\n    // the effect should be re-executed and the query re-retained.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, cacheIdentifier]);\n  useEffect(function () {\n    // Release any temporary retain that's not released. At this point, if the\n    // cacheIdentifier doesn't change, the query is still permanently retained,\n    // and the temporary retain is redundant.\n    QueryResource.releaseTemporaryRetain(preparedQueryResult); // This effect is intended to run on every commit, thus no dependency\n  });\n  var fragmentNode = preparedQueryResult.fragmentNode,\n      fragmentRef = preparedQueryResult.fragmentRef;\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n      data = _useFragmentNode.data;\n\n  return data;\n}\n\nmodule.exports = useLazyLoadQueryNode;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js"],"names":["ProfilerContext","require","_require","getQueryCacheIdentifier","getQueryResourceForEnvironment","useFetchTrackingRef","useFragmentNode","useRelayEnvironment","React","useContext","useEffect","useState","useRef","useLazyLoadQueryNode","_ref","query","componentDisplayName","fetchObservable","fetchPolicy","fetchKey","renderPolicy","environment","profilerContext","QueryResource","_useState","forceUpdateKey","forceUpdate","_useFetchTrackingRef","startFetch","completeFetch","cacheBreaker","concat","cacheIdentifier","preparedQueryResult","wrapPrepareQueryResource","prepareWithIdentifier","start","complete","error","maybeHiddenOrFastRefresh","current","n","disposable","retain","dispose","releaseTemporaryRetain","fragmentNode","fragmentRef","_useFragmentNode","data","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ProfilerContext = require('./ProfilerContext');\n\nvar _require = require('./QueryResource'),\n    getQueryCacheIdentifier = _require.getQueryCacheIdentifier,\n    getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;\n\nvar useFetchTrackingRef = require('./useFetchTrackingRef');\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar React = require('react');\n\nvar useContext = React.useContext,\n    useEffect = React.useEffect,\n    useState = React.useState,\n    useRef = React.useRef;\n\nfunction useLazyLoadQueryNode(_ref) {\n  var query = _ref.query,\n      componentDisplayName = _ref.componentDisplayName,\n      fetchObservable = _ref.fetchObservable,\n      fetchPolicy = _ref.fetchPolicy,\n      fetchKey = _ref.fetchKey,\n      renderPolicy = _ref.renderPolicy;\n  var environment = useRelayEnvironment();\n  var profilerContext = useContext(ProfilerContext);\n  var QueryResource = getQueryResourceForEnvironment(environment);\n\n  var _useState = useState(0),\n      forceUpdateKey = _useState[0],\n      forceUpdate = _useState[1];\n\n  var _useFetchTrackingRef = useFetchTrackingRef(),\n      startFetch = _useFetchTrackingRef.startFetch,\n      completeFetch = _useFetchTrackingRef.completeFetch;\n\n  var cacheBreaker = \"\".concat(forceUpdateKey, \"-\").concat(fetchKey !== null && fetchKey !== void 0 ? fetchKey : '');\n  var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);\n  var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function () {\n    return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {\n      start: startFetch,\n      complete: completeFetch,\n      error: completeFetch\n    }, profilerContext);\n  });\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current cached resource will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly attempt to\n      // retain a cached query resource that was disposed, we need to force\n      // a re-render so that the cache entry for this query is re-intiliazed and\n      // and re-evaluated (and potentially cause a refetch).\n      maybeHiddenOrFastRefresh.current = false;\n      forceUpdate(function (n) {\n        return n + 1;\n      });\n      return;\n    }\n\n    var disposable = QueryResource.retain(preparedQueryResult, profilerContext);\n    return function () {\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because the `environment`\n    // and `cacheIdentifier` identities are capturing all information about whether\n    // the effect should be re-executed and the query re-retained.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, cacheIdentifier]);\n  useEffect(function () {\n    // Release any temporary retain that's not released. At this point, if the\n    // cacheIdentifier doesn't change, the query is still permanently retained,\n    // and the temporary retain is redundant.\n    QueryResource.releaseTemporaryRetain(preparedQueryResult); // This effect is intended to run on every commit, thus no dependency\n  });\n  var fragmentNode = preparedQueryResult.fragmentNode,\n      fragmentRef = preparedQueryResult.fragmentRef;\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n      data = _useFragmentNode.data;\n\n  return data;\n}\n\nmodule.exports = useLazyLoadQueryNode;"]},"metadata":{},"sourceType":"script"}