{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar internTable = new Map();\nvar nextIndex = 1;\nvar digits = initDigitTable(); // Character used as the prefix for interned strings. The specific character is\n// chosen to reduce the likelihood that non-interned input strings need to be\n// escaped (choosing eg a-Z would increase the likelihood we need to escape)\n\nvar INTERN_PREFIX = '\\t'; // Character used as the prefix of escaped strings. As above, this is also\n// chosen to be unlikely in normal input strings.\n\nvar ESCAPE_PREFIX = '\\v';\n\nfunction initDigitTable() {\n  // disable lint because digits isn't defined when this function is called\n  // eslint-disable-next-line no-shadow\n  var digits = new Set();\n\n  for (var i = 0; i < 10; ++i) {\n    digits.add(i.toString());\n  }\n\n  return digits;\n} // Escape a string so that it cannot conflict with an interned string\n\n\nfunction escape(str) {\n  if ( // \"\\t<digit>...\" -> \"\\v\\t<digit>...\"\n  str[0] === INTERN_PREFIX && digits.has(str[1]) || // \"\\v...\" -> \"\\v\\v...\"\n  str[0] === ESCAPE_PREFIX) {\n    return ESCAPE_PREFIX + str;\n  }\n\n  return str;\n} // Interns the input string if its length equals or exceeds the given `limit`,\n// returning a shorter replacement string that is uniquely associated with the\n// input: multiple calls to intern() for the equivalent input strings (and limit)\n// will always return the exact same string.\n// Strings shorter than the limit are not interned but are escaped if they\n// could conflict with interned strings.\n\n\nfunction intern(str, limit) {\n  if (limit == null || str.length < limit) {\n    return escape(str);\n  }\n\n  var internedString = internTable.get(str);\n\n  if (internedString != null) {\n    return internedString;\n  }\n\n  internedString = INTERN_PREFIX + nextIndex++;\n  internTable.set(str, internedString);\n  return internedString;\n}\n\nmodule.exports = {\n  intern: intern\n};","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/util/StringInterner.js"],"names":["internTable","Map","nextIndex","digits","initDigitTable","INTERN_PREFIX","ESCAPE_PREFIX","Set","i","add","toString","escape","str","has","intern","limit","length","internedString","get","set","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,MAAM,GAAGC,cAAc,EAA3B,C,CAA+B;AAC/B;AACA;;AAEA,IAAIC,aAAa,GAAG,IAApB,C,CAA0B;AAC1B;;AAEA,IAAIC,aAAa,GAAG,IAApB;;AAEA,SAASF,cAAT,GAA0B;AACxB;AACA;AACA,MAAID,MAAM,GAAG,IAAII,GAAJ,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3BL,IAAAA,MAAM,CAACM,GAAP,CAAWD,CAAC,CAACE,QAAF,EAAX;AACD;;AAED,SAAOP,MAAP;AACD,C,CAAC;;;AAGF,SAASQ,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,OAAK;AACLA,EAAAA,GAAG,CAAC,CAAD,CAAH,KAAWP,aAAX,IAA4BF,MAAM,CAACU,GAAP,CAAWD,GAAG,CAAC,CAAD,CAAd,CAA5B,IAAkD;AAClDA,EAAAA,GAAG,CAAC,CAAD,CAAH,KAAWN,aAFX,EAE0B;AACxB,WAAOA,aAAa,GAAGM,GAAvB;AACD;;AAED,SAAOA,GAAP;AACD,C,CAAC;AACF;AACA;AACA;AACA;AACA;;;AAGA,SAASE,MAAT,CAAgBF,GAAhB,EAAqBG,KAArB,EAA4B;AAC1B,MAAIA,KAAK,IAAI,IAAT,IAAiBH,GAAG,CAACI,MAAJ,GAAaD,KAAlC,EAAyC;AACvC,WAAOJ,MAAM,CAACC,GAAD,CAAb;AACD;;AAED,MAAIK,cAAc,GAAGjB,WAAW,CAACkB,GAAZ,CAAgBN,GAAhB,CAArB;;AAEA,MAAIK,cAAc,IAAI,IAAtB,EAA4B;AAC1B,WAAOA,cAAP;AACD;;AAEDA,EAAAA,cAAc,GAAGZ,aAAa,GAAGH,SAAS,EAA1C;AACAF,EAAAA,WAAW,CAACmB,GAAZ,CAAgBP,GAAhB,EAAqBK,cAArB;AACA,SAAOA,cAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,MAAM,EAAEA;AADO,CAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar internTable = new Map();\nvar nextIndex = 1;\nvar digits = initDigitTable(); // Character used as the prefix for interned strings. The specific character is\n// chosen to reduce the likelihood that non-interned input strings need to be\n// escaped (choosing eg a-Z would increase the likelihood we need to escape)\n\nvar INTERN_PREFIX = '\\t'; // Character used as the prefix of escaped strings. As above, this is also\n// chosen to be unlikely in normal input strings.\n\nvar ESCAPE_PREFIX = '\\v';\n\nfunction initDigitTable() {\n  // disable lint because digits isn't defined when this function is called\n  // eslint-disable-next-line no-shadow\n  var digits = new Set();\n\n  for (var i = 0; i < 10; ++i) {\n    digits.add(i.toString());\n  }\n\n  return digits;\n} // Escape a string so that it cannot conflict with an interned string\n\n\nfunction escape(str) {\n  if ( // \"\\t<digit>...\" -> \"\\v\\t<digit>...\"\n  str[0] === INTERN_PREFIX && digits.has(str[1]) || // \"\\v...\" -> \"\\v\\v...\"\n  str[0] === ESCAPE_PREFIX) {\n    return ESCAPE_PREFIX + str;\n  }\n\n  return str;\n} // Interns the input string if its length equals or exceeds the given `limit`,\n// returning a shorter replacement string that is uniquely associated with the\n// input: multiple calls to intern() for the equivalent input strings (and limit)\n// will always return the exact same string.\n// Strings shorter than the limit are not interned but are escaped if they\n// could conflict with interned strings.\n\n\nfunction intern(str, limit) {\n  if (limit == null || str.length < limit) {\n    return escape(str);\n  }\n\n  var internedString = internTable.get(str);\n\n  if (internedString != null) {\n    return internedString;\n  }\n\n  internedString = INTERN_PREFIX + nextIndex++;\n  internTable.set(str, internedString);\n  return internedString;\n}\n\nmodule.exports = {\n  intern: intern\n};"]},"metadata":{},"sourceType":"script"}