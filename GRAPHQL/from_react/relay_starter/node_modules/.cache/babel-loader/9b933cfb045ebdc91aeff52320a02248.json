{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayStoreUtils'),\n    getArgumentValues = _require2.getArgumentValues;\n\nvar nonUpdatableKeys = ['id', '__id', '__typename', 'js'];\n\nfunction readUpdatableQuery_EXPERIMENTAL(query, variables, proxy) {\n  // TODO assert that the concrete request is an updatable query\n  var request = getRequest(query);\n  var updatableProxy = {};\n  updateProxyFromSelections(updatableProxy, proxy.getRoot(), variables, request.fragment.selections, proxy);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    Object.freeze(updatableProxy);\n  }\n\n  return updatableProxy;\n}\n\nfunction updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selections, root) {\n  var _selection$alias3;\n\n  var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(selections),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var selection = _step.value;\n\n      switch (selection.kind) {\n        case 'LinkedField':\n          if (selection.plural) {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {\n              // $FlowFixMe[incompatible-call] these getters and setters have different types on purpose\n              get: createGetterForPluralLinkedField(selection, queryVariables, recordProxy, root),\n              set: createSetterForPluralLinkedField(selection, queryVariables, recordProxy, root)\n            });\n          } else {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {\n              get: createGetterForSingularLinkedField(selection, queryVariables, recordProxy, root),\n              set: createSetterForSingularLinkedField(selection, queryVariables, recordProxy, root)\n            });\n          }\n\n          break;\n\n        case 'ScalarField':\n          var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;\n          Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {\n            get: function get() {\n              var _selection$args;\n\n              var variables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], queryVariables); // Flow incorrect assumes that the return value for the get method must match\n              // the set parameter.\n\n              return recordProxy.getValue(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n              variables // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n              );\n            },\n            set: nonUpdatableKeys.includes(selection.name) ? undefined : // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n            function (newValue) {\n              var _selection$args2;\n\n              var variables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], queryVariables);\n              recordProxy.setValue(newValue, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n              variables);\n            }\n          });\n          break;\n\n        case 'InlineFragment':\n          if (recordProxy.getType() === selection.type) {\n            updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selection.selections, root);\n          }\n\n          break;\n\n        case 'ClientExtension':\n          updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selection.selections, root);\n          break;\n\n        case 'FragmentSpread':\n          // Explicitly ignore\n          break;\n\n        default:\n          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _selection$alias;\n\n      var _selection$alias2;\n\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction createSetterForPluralLinkedField(selection, queryVariables, recordProxy, root) {\n  return function set(newValue) {\n    var _selection$args3;\n\n    var variables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], queryVariables);\n\n    if (newValue == null) {\n      throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');\n    } else {\n      var recordProxies = newValue.map(function (item) {\n        if (item == null) {\n          throw new Error('When assigning an array of items, none of the items should be null or undefined.');\n        }\n\n        var __id = item.__id;\n\n        if (__id == null) {\n          throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');\n        }\n\n        var newValueRecord = root.get(__id);\n\n        if (newValueRecord == null) {\n          throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n        }\n\n        return newValueRecord;\n      });\n      recordProxy.setLinkedRecords(recordProxies, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n      variables);\n    }\n  };\n}\n\nfunction createSetterForSingularLinkedField(selection, queryVariables, recordProxy, root) {\n  return function set(newValue) {\n    var _selection$args4;\n\n    var variables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], queryVariables);\n\n    if (newValue == null) {\n      // $FlowFixMe[unclear-type] No good way to type these variables\n      recordProxy.setValue(newValue, selection.name, variables);\n    } else {\n      var __id = newValue.__id;\n\n      if (__id == null) {\n        throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');\n      }\n\n      var newValueRecord = root.get(__id);\n\n      if (newValueRecord == null) {\n        throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n      }\n\n      recordProxy.setLinkedRecord(newValueRecord, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n      variables);\n    }\n  };\n}\n\nfunction createGetterForPluralLinkedField(selection, queryVariables, recordProxy, root) {\n  return function () {\n    var _selection$args5;\n\n    var variables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], queryVariables);\n    var linkedRecords = recordProxy.getLinkedRecords(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n    variables);\n\n    if (linkedRecords != null) {\n      return linkedRecords.map(function (linkedRecord) {\n        if (linkedRecord != null) {\n          var updatableProxy = {};\n          updateProxyFromSelections(updatableProxy, linkedRecord, queryVariables, selection.selections, root);\n\n          if (process.env.NODE_ENV !== \"production\") {\n            Object.freeze(updatableProxy);\n          } // Flow incorrect assumes that the return value for the get method must match\n          // the set parameter.\n          // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n          return updatableProxy;\n        } else {\n          return linkedRecord;\n        } // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n      });\n    } else {\n      return linkedRecords;\n    }\n  };\n}\n\nfunction createGetterForSingularLinkedField(selection, queryVariables, recordProxy, root) {\n  return function () {\n    var _selection$args6;\n\n    var variables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], queryVariables);\n    var linkedRecord = recordProxy.getLinkedRecord(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n    variables);\n\n    if (linkedRecord != null) {\n      var updatableProxy = {};\n      updateProxyFromSelections(updatableProxy, linkedRecord, queryVariables, selection.selections, root);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        Object.freeze(updatableProxy);\n      } // Flow incorrect assumes that the return value for the get method must match\n      // the set parameter.\n      // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n      return updatableProxy;\n    } else {\n      return linkedRecord;\n    }\n  };\n}\n\nmodule.exports = {\n  readUpdatableQuery_EXPERIMENTAL: readUpdatableQuery_EXPERIMENTAL\n};","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/mutations/readUpdatableQuery_EXPERIMENTAL.js"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_require","getRequest","_require2","getArgumentValues","nonUpdatableKeys","readUpdatableQuery_EXPERIMENTAL","query","variables","proxy","request","updatableProxy","updateProxyFromSelections","getRoot","fragment","selections","process","env","NODE_ENV","Object","freeze","mutableUpdatableProxy","recordProxy","queryVariables","root","_selection$alias3","_iterator","_step","_loop","selection","value","kind","plural","defineProperty","_selection$alias","alias","name","get","createGetterForPluralLinkedField","set","createSetterForPluralLinkedField","_selection$alias2","createGetterForSingularLinkedField","createSetterForSingularLinkedField","scalarFieldName","_selection$args","args","getValue","includes","undefined","newValue","_selection$args2","setValue","getType","type","Error","s","n","done","err","e","f","_selection$args3","recordProxies","map","item","__id","newValueRecord","concat","setLinkedRecords","_selection$args4","setLinkedRecord","_selection$args5","linkedRecords","getLinkedRecords","linkedRecord","_selection$args6","getLinkedRecord","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayStoreUtils'),\n    getArgumentValues = _require2.getArgumentValues;\n\nvar nonUpdatableKeys = ['id', '__id', '__typename', 'js'];\n\nfunction readUpdatableQuery_EXPERIMENTAL(query, variables, proxy) {\n  // TODO assert that the concrete request is an updatable query\n  var request = getRequest(query);\n  var updatableProxy = {};\n  updateProxyFromSelections(updatableProxy, proxy.getRoot(), variables, request.fragment.selections, proxy);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    Object.freeze(updatableProxy);\n  }\n\n  return updatableProxy;\n}\n\nfunction updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selections, root) {\n  var _selection$alias3;\n\n  var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(selections),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var selection = _step.value;\n\n      switch (selection.kind) {\n        case 'LinkedField':\n          if (selection.plural) {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {\n              // $FlowFixMe[incompatible-call] these getters and setters have different types on purpose\n              get: createGetterForPluralLinkedField(selection, queryVariables, recordProxy, root),\n              set: createSetterForPluralLinkedField(selection, queryVariables, recordProxy, root)\n            });\n          } else {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {\n              get: createGetterForSingularLinkedField(selection, queryVariables, recordProxy, root),\n              set: createSetterForSingularLinkedField(selection, queryVariables, recordProxy, root)\n            });\n          }\n\n          break;\n\n        case 'ScalarField':\n          var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;\n          Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {\n            get: function get() {\n              var _selection$args;\n\n              var variables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], queryVariables); // Flow incorrect assumes that the return value for the get method must match\n              // the set parameter.\n\n              return recordProxy.getValue(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n              variables // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n              );\n            },\n            set: nonUpdatableKeys.includes(selection.name) ? undefined : // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n            function (newValue) {\n              var _selection$args2;\n\n              var variables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], queryVariables);\n              recordProxy.setValue(newValue, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n              variables);\n            }\n          });\n          break;\n\n        case 'InlineFragment':\n          if (recordProxy.getType() === selection.type) {\n            updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selection.selections, root);\n          }\n\n          break;\n\n        case 'ClientExtension':\n          updateProxyFromSelections(mutableUpdatableProxy, recordProxy, queryVariables, selection.selections, root);\n          break;\n\n        case 'FragmentSpread':\n          // Explicitly ignore\n          break;\n\n        default:\n          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _selection$alias;\n\n      var _selection$alias2;\n\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction createSetterForPluralLinkedField(selection, queryVariables, recordProxy, root) {\n  return function set(newValue) {\n    var _selection$args3;\n\n    var variables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], queryVariables);\n\n    if (newValue == null) {\n      throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');\n    } else {\n      var recordProxies = newValue.map(function (item) {\n        if (item == null) {\n          throw new Error('When assigning an array of items, none of the items should be null or undefined.');\n        }\n\n        var __id = item.__id;\n\n        if (__id == null) {\n          throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');\n        }\n\n        var newValueRecord = root.get(__id);\n\n        if (newValueRecord == null) {\n          throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n        }\n\n        return newValueRecord;\n      });\n      recordProxy.setLinkedRecords(recordProxies, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n      variables);\n    }\n  };\n}\n\nfunction createSetterForSingularLinkedField(selection, queryVariables, recordProxy, root) {\n  return function set(newValue) {\n    var _selection$args4;\n\n    var variables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], queryVariables);\n\n    if (newValue == null) {\n      // $FlowFixMe[unclear-type] No good way to type these variables\n      recordProxy.setValue(newValue, selection.name, variables);\n    } else {\n      var __id = newValue.__id;\n\n      if (__id == null) {\n        throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');\n      }\n\n      var newValueRecord = root.get(__id);\n\n      if (newValueRecord == null) {\n        throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n      }\n\n      recordProxy.setLinkedRecord(newValueRecord, selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n      variables);\n    }\n  };\n}\n\nfunction createGetterForPluralLinkedField(selection, queryVariables, recordProxy, root) {\n  return function () {\n    var _selection$args5;\n\n    var variables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], queryVariables);\n    var linkedRecords = recordProxy.getLinkedRecords(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n    variables);\n\n    if (linkedRecords != null) {\n      return linkedRecords.map(function (linkedRecord) {\n        if (linkedRecord != null) {\n          var updatableProxy = {};\n          updateProxyFromSelections(updatableProxy, linkedRecord, queryVariables, selection.selections, root);\n\n          if (process.env.NODE_ENV !== \"production\") {\n            Object.freeze(updatableProxy);\n          } // Flow incorrect assumes that the return value for the get method must match\n          // the set parameter.\n          // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n          return updatableProxy;\n        } else {\n          return linkedRecord;\n        } // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n      });\n    } else {\n      return linkedRecords;\n    }\n  };\n}\n\nfunction createGetterForSingularLinkedField(selection, queryVariables, recordProxy, root) {\n  return function () {\n    var _selection$args6;\n\n    var variables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], queryVariables);\n    var linkedRecord = recordProxy.getLinkedRecord(selection.name, // $FlowFixMe[unclear-type] No good way to type these variables\n    variables);\n\n    if (linkedRecord != null) {\n      var updatableProxy = {};\n      updateProxyFromSelections(updatableProxy, linkedRecord, queryVariables, selection.selections, root);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        Object.freeze(updatableProxy);\n      } // Flow incorrect assumes that the return value for the get method must match\n      // the set parameter.\n      // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n      return updatableProxy;\n    } else {\n      return linkedRecord;\n    }\n  };\n}\n\nmodule.exports = {\n  readUpdatableQuery_EXPERIMENTAL: readUpdatableQuery_EXPERIMENTAL\n};"]},"metadata":{},"sourceType":"script"}