{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar withProvidedVariables = require('../util/withProvidedVariables');\n\nvar _require = require('./ConvertToExecuteFunction'),\n    convertFetch = _require.convertFetch;\n\nvar invariant = require('invariant');\n/**\n * Creates an implementation of the `Network` interface defined in\n * `RelayNetworkTypes` given `fetch` and `subscribe` functions.\n */\n\n\nfunction create(fetchFn, subscribe) {\n  // Convert to functions that returns RelayObservable.\n  var observeFetch = convertFetch(fetchFn);\n\n  function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {\n    var operationVariables = withProvidedVariables(variables, request.providedVariables);\n\n    if (request.operationKind === 'subscription') {\n      !subscribe ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : invariant(false) : void 0;\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : invariant(false) : void 0;\n      return subscribe(request, operationVariables, cacheConfig);\n    }\n\n    var pollInterval = cacheConfig.poll;\n\n    if (pollInterval != null) {\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : invariant(false) : void 0;\n      return observeFetch(request, operationVariables, {\n        force: true\n      }).poll(pollInterval);\n    }\n\n    return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);\n  }\n\n  return {\n    execute: execute\n  };\n}\n\nmodule.exports = {\n  create: create\n};","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/network/RelayNetwork.js"],"names":["withProvidedVariables","require","_require","convertFetch","invariant","create","fetchFn","subscribe","observeFetch","execute","request","variables","cacheConfig","uploadables","logRequestInfo","operationVariables","providedVariables","operationKind","process","env","NODE_ENV","pollInterval","poll","force","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,+BAAD,CAAnC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,4BAAD,CAAtB;AAAA,IACIE,YAAY,GAAGD,QAAQ,CAACC,YAD5B;;AAGA,IAAIC,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAvB;AACA;AACA;AACA;AACA;;;AAGA,SAASI,MAAT,CAAgBC,OAAhB,EAAyBC,SAAzB,EAAoC;AAClC;AACA,MAAIC,YAAY,GAAGL,YAAY,CAACG,OAAD,CAA/B;;AAEA,WAASG,OAAT,CAAiBC,OAAjB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,WAAlD,EAA+DC,cAA/D,EAA+E;AAC7E,QAAIC,kBAAkB,GAAGf,qBAAqB,CAACW,SAAD,EAAYD,OAAO,CAACM,iBAApB,CAA9C;;AAEA,QAAIN,OAAO,CAACO,aAAR,KAA0B,cAA9B,EAA8C;AAC5C,OAACV,SAAD,GAAaW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,sEAAsE,uDAA9E,CAAjD,GAA0LA,SAAS,CAAC,KAAD,CAAhN,GAA0N,KAAK,CAA/N;AACA,OAAC,CAACS,WAAF,GAAgBK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,6DAAR,CAAjD,GAA0HA,SAAS,CAAC,KAAD,CAAnJ,GAA6J,KAAK,CAAlK;AACA,aAAOG,SAAS,CAACG,OAAD,EAAUK,kBAAV,EAA8BH,WAA9B,CAAhB;AACD;;AAED,QAAIS,YAAY,GAAGT,WAAW,CAACU,IAA/B;;AAEA,QAAID,YAAY,IAAI,IAApB,EAA0B;AACxB,OAAC,CAACR,WAAF,GAAgBK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,yDAAR,CAAjD,GAAsHA,SAAS,CAAC,KAAD,CAA/I,GAAyJ,KAAK,CAA9J;AACA,aAAOI,YAAY,CAACE,OAAD,EAAUK,kBAAV,EAA8B;AAC/CQ,QAAAA,KAAK,EAAE;AADwC,OAA9B,CAAZ,CAEJD,IAFI,CAECD,YAFD,CAAP;AAGD;;AAED,WAAOb,YAAY,CAACE,OAAD,EAAUK,kBAAV,EAA8BH,WAA9B,EAA2CC,WAA3C,EAAwDC,cAAxD,CAAnB;AACD;;AAED,SAAO;AACLL,IAAAA,OAAO,EAAEA;AADJ,GAAP;AAGD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,MAAM,EAAEA;AADO,CAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar withProvidedVariables = require('../util/withProvidedVariables');\n\nvar _require = require('./ConvertToExecuteFunction'),\n    convertFetch = _require.convertFetch;\n\nvar invariant = require('invariant');\n/**\n * Creates an implementation of the `Network` interface defined in\n * `RelayNetworkTypes` given `fetch` and `subscribe` functions.\n */\n\n\nfunction create(fetchFn, subscribe) {\n  // Convert to functions that returns RelayObservable.\n  var observeFetch = convertFetch(fetchFn);\n\n  function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {\n    var operationVariables = withProvidedVariables(variables, request.providedVariables);\n\n    if (request.operationKind === 'subscription') {\n      !subscribe ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : invariant(false) : void 0;\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : invariant(false) : void 0;\n      return subscribe(request, operationVariables, cacheConfig);\n    }\n\n    var pollInterval = cacheConfig.poll;\n\n    if (pollInterval != null) {\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : invariant(false) : void 0;\n      return observeFetch(request, operationVariables, {\n        force: true\n      }).poll(pollInterval);\n    }\n\n    return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);\n  }\n\n  return {\n    execute: execute\n  };\n}\n\nmodule.exports = {\n  create: create\n};"]},"metadata":{},"sourceType":"script"}