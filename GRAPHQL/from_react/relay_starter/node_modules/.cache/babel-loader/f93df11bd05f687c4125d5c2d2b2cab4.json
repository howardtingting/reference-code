{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar invariant = require('invariant');\n\nvar TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1000;\n/**\n * Allows you to retain a resource as part of a component lifecycle accounting\n * for Suspense. You temporarily retain the resource during render, then\n * permanently retain it during commit and release it during unmount.\n */\n\nvar SuspenseResource = /*#__PURE__*/function () {\n  function SuspenseResource(retain) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_retainCount\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"_retainDisposable\", null);\n    (0, _defineProperty2[\"default\"])(this, \"_releaseTemporaryRetain\", null);\n\n    this._retain = function (environment) {\n      _this._retainCount++;\n\n      if (_this._retainCount === 1) {\n        _this._retainDisposable = retain(environment);\n      }\n\n      return {\n        dispose: function dispose() {\n          _this._retainCount = Math.max(0, _this._retainCount - 1);\n\n          if (_this._retainCount === 0) {\n            !(_this._retainDisposable != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected disposable to release query to be defined.' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n\n            _this._retainDisposable.dispose();\n\n            _this._retainDisposable = null;\n          }\n        }\n      };\n    };\n  }\n\n  var _proto = SuspenseResource.prototype;\n\n  _proto.temporaryRetain = function temporaryRetain(environment) {\n    var _this2 = this;\n\n    var _this$_releaseTempora; // If we're executing in a server environment, there's no need\n    // to create temporary retains, since the component will never commit.\n\n\n    if (environment.isServer()) {\n      return {\n        dispose: function dispose() {}\n      };\n    } // temporaryRetain is called during the render phase. However,\n    // given that we can't tell if this render will eventually commit or not,\n    // we create a timer to autodispose of this retain in case the associated\n    // component never commits.\n    // If the component /does/ commit, permanentRetain will clear this timeout\n    // and permanently retain the data.\n\n\n    var retention = this._retain(environment);\n\n    var releaseQueryTimeout = null;\n\n    var releaseTemporaryRetain = function releaseTemporaryRetain() {\n      clearTimeout(releaseQueryTimeout);\n      releaseQueryTimeout = null;\n      _this2._releaseTemporaryRetain = null;\n      retention.dispose();\n    };\n\n    releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS); // NOTE: Since temporaryRetain can be called multiple times, we release\n    // the previous temporary retain after we re-establish a new one, since\n    // we only ever need a single temporary retain until the permanent retain is\n    // established.\n    // temporaryRetain may be called multiple times by React during the render\n    // phase, as well as multiple times by other query components that are\n    // rendering the same query/variables.\n\n    (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === void 0 ? void 0 : _this$_releaseTempora.call(this);\n    this._releaseTemporaryRetain = releaseTemporaryRetain;\n    return {\n      dispose: function dispose() {\n        var _this$_releaseTempora2;\n\n        (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === void 0 ? void 0 : _this$_releaseTempora2.call(_this2);\n      }\n    };\n  };\n\n  _proto.permanentRetain = function permanentRetain(environment) {\n    var disposable = this._retain(environment);\n\n    this.releaseTemporaryRetain();\n    return disposable;\n  };\n\n  _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {\n    var _this$_releaseTempora3;\n\n    (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === void 0 ? void 0 : _this$_releaseTempora3.call(this);\n    this._releaseTemporaryRetain = null;\n  };\n\n  _proto.getRetainCount = function getRetainCount() {\n    return this._retainCount;\n  };\n\n  return SuspenseResource;\n}();\n\nmodule.exports = SuspenseResource;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/react-relay/lib/relay-hooks/SuspenseResource.js"],"names":["_interopRequireDefault","require","_defineProperty2","invariant","TEMPORARY_RETAIN_DURATION_MS","SuspenseResource","retain","_this","_retain","environment","_retainCount","_retainDisposable","dispose","Math","max","process","env","NODE_ENV","_proto","prototype","temporaryRetain","_this2","_this$_releaseTempora","isServer","retention","releaseQueryTimeout","releaseTemporaryRetain","clearTimeout","_releaseTemporaryRetain","setTimeout","call","_this$_releaseTempora2","permanentRetain","disposable","_this$_releaseTempora3","getRetainCount","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar invariant = require('invariant');\n\nvar TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1000;\n/**\n * Allows you to retain a resource as part of a component lifecycle accounting\n * for Suspense. You temporarily retain the resource during render, then\n * permanently retain it during commit and release it during unmount.\n */\n\nvar SuspenseResource = /*#__PURE__*/function () {\n  function SuspenseResource(retain) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_retainCount\", 0);\n    (0, _defineProperty2[\"default\"])(this, \"_retainDisposable\", null);\n    (0, _defineProperty2[\"default\"])(this, \"_releaseTemporaryRetain\", null);\n\n    this._retain = function (environment) {\n      _this._retainCount++;\n\n      if (_this._retainCount === 1) {\n        _this._retainDisposable = retain(environment);\n      }\n\n      return {\n        dispose: function dispose() {\n          _this._retainCount = Math.max(0, _this._retainCount - 1);\n\n          if (_this._retainCount === 0) {\n            !(_this._retainDisposable != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected disposable to release query to be defined.' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n\n            _this._retainDisposable.dispose();\n\n            _this._retainDisposable = null;\n          }\n        }\n      };\n    };\n  }\n\n  var _proto = SuspenseResource.prototype;\n\n  _proto.temporaryRetain = function temporaryRetain(environment) {\n    var _this2 = this;\n\n    var _this$_releaseTempora;\n\n    // If we're executing in a server environment, there's no need\n    // to create temporary retains, since the component will never commit.\n    if (environment.isServer()) {\n      return {\n        dispose: function dispose() {}\n      };\n    } // temporaryRetain is called during the render phase. However,\n    // given that we can't tell if this render will eventually commit or not,\n    // we create a timer to autodispose of this retain in case the associated\n    // component never commits.\n    // If the component /does/ commit, permanentRetain will clear this timeout\n    // and permanently retain the data.\n\n\n    var retention = this._retain(environment);\n\n    var releaseQueryTimeout = null;\n\n    var releaseTemporaryRetain = function releaseTemporaryRetain() {\n      clearTimeout(releaseQueryTimeout);\n      releaseQueryTimeout = null;\n      _this2._releaseTemporaryRetain = null;\n      retention.dispose();\n    };\n\n    releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS); // NOTE: Since temporaryRetain can be called multiple times, we release\n    // the previous temporary retain after we re-establish a new one, since\n    // we only ever need a single temporary retain until the permanent retain is\n    // established.\n    // temporaryRetain may be called multiple times by React during the render\n    // phase, as well as multiple times by other query components that are\n    // rendering the same query/variables.\n\n    (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === void 0 ? void 0 : _this$_releaseTempora.call(this);\n    this._releaseTemporaryRetain = releaseTemporaryRetain;\n    return {\n      dispose: function dispose() {\n        var _this$_releaseTempora2;\n\n        (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === void 0 ? void 0 : _this$_releaseTempora2.call(_this2);\n      }\n    };\n  };\n\n  _proto.permanentRetain = function permanentRetain(environment) {\n    var disposable = this._retain(environment);\n\n    this.releaseTemporaryRetain();\n    return disposable;\n  };\n\n  _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {\n    var _this$_releaseTempora3;\n\n    (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === void 0 ? void 0 : _this$_releaseTempora3.call(this);\n    this._releaseTemporaryRetain = null;\n  };\n\n  _proto.getRetainCount = function getRetainCount() {\n    return this._retainCount;\n  };\n\n  return SuspenseResource;\n}();\n\nmodule.exports = SuspenseResource;"]},"metadata":{},"sourceType":"script"}