{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('../store/RelayModernRecord');\n\nvar _require = require('../store/RelayRecordState'),\n    EXISTENT = _require.EXISTENT,\n    NONEXISTENT = _require.NONEXISTENT;\n\nvar _require2 = require('../store/RelayStoreUtils'),\n    ROOT_ID = _require2.ROOT_ID,\n    ROOT_TYPE = _require2.ROOT_TYPE;\n\nvar _require3 = require('./readUpdatableQuery_EXPERIMENTAL'),\n    _readUpdatableQuery_EXPERIMENTAL = _require3.readUpdatableQuery_EXPERIMENTAL;\n\nvar RelayRecordProxy = require('./RelayRecordProxy');\n\nvar invariant = require('invariant');\n/**\n * @internal\n *\n * A helper for manipulating a `RecordSource` via an imperative/OO-style API.\n */\n\n\nvar RelayRecordSourceProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceProxy(mutator, getDataID, handlerProvider) {\n    this.__mutator = mutator;\n    this._handlerProvider = handlerProvider || null;\n    this._proxies = {};\n    this._getDataID = getDataID;\n    this._invalidatedStore = false;\n    this._idsMarkedForInvalidation = new Set();\n  }\n\n  var _proto = RelayRecordSourceProxy.prototype;\n\n  _proto.publishSource = function publishSource(source, fieldPayloads) {\n    var _this = this;\n\n    var dataIDs = source.getRecordIDs();\n    dataIDs.forEach(function (dataID) {\n      var status = source.getStatus(dataID);\n\n      if (status === EXISTENT) {\n        var sourceRecord = source.get(dataID);\n\n        if (sourceRecord) {\n          if (_this.__mutator.getStatus(dataID) !== EXISTENT) {\n            _this.create(dataID, RelayModernRecord.getType(sourceRecord));\n          }\n\n          _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);\n        }\n      } else if (status === NONEXISTENT) {\n        _this[\"delete\"](dataID);\n      }\n    });\n\n    if (fieldPayloads && fieldPayloads.length) {\n      fieldPayloads.forEach(function (fieldPayload) {\n        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);\n\n        !handler ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for handle `%s`.', fieldPayload.handle) : invariant(false) : void 0;\n        handler.update(_this, fieldPayload);\n      });\n    }\n  };\n\n  _proto.create = function create(dataID, typeName) {\n    this.__mutator.create(dataID, typeName);\n\n    delete this._proxies[dataID];\n    var record = this.get(dataID); // For flow\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#create(): Expected the created record to exist.') : invariant(false) : void 0;\n    return record;\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    !(dataID !== ROOT_ID) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#delete(): Cannot delete the root record.') : invariant(false) : void 0;\n    delete this._proxies[dataID];\n\n    this.__mutator[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    if (!this._proxies.hasOwnProperty(dataID)) {\n      var status = this.__mutator.getStatus(dataID);\n\n      if (status === EXISTENT) {\n        this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);\n      } else {\n        this._proxies[dataID] = status === NONEXISTENT ? null : undefined;\n      }\n    }\n\n    return this._proxies[dataID];\n  };\n\n  _proto.getRoot = function getRoot() {\n    var root = this.get(ROOT_ID);\n\n    if (!root) {\n      root = this.create(ROOT_ID, ROOT_TYPE);\n    }\n\n    !(root && root.getType() === ROOT_TYPE) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#getRoot(): Expected the source to contain a ' + 'root record, %s.', root == null ? 'no root record found' : \"found a root record of type `\".concat(root.getType(), \"`\")) : invariant(false) : void 0;\n    return root;\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this._invalidatedStore = true;\n  };\n\n  _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {\n    return this._invalidatedStore;\n  };\n\n  _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {\n    this._idsMarkedForInvalidation.add(dataID);\n  };\n\n  _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {\n    return this._idsMarkedForInvalidation;\n  };\n\n  _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {\n    return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);\n  };\n\n  return RelayRecordSourceProxy;\n}();\n\nmodule.exports = RelayRecordSourceProxy;","map":{"version":3,"sources":["/home/ting/Desktop/Projects/tutorials/GRAPHQL/from_react/relay_starter/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js"],"names":["RelayModernRecord","require","_require","EXISTENT","NONEXISTENT","_require2","ROOT_ID","ROOT_TYPE","_require3","_readUpdatableQuery_EXPERIMENTAL","readUpdatableQuery_EXPERIMENTAL","RelayRecordProxy","invariant","RelayRecordSourceProxy","mutator","getDataID","handlerProvider","__mutator","_handlerProvider","_proxies","_getDataID","_invalidatedStore","_idsMarkedForInvalidation","Set","_proto","prototype","publishSource","source","fieldPayloads","_this","dataIDs","getRecordIDs","forEach","dataID","status","getStatus","sourceRecord","get","create","getType","copyFieldsFromRecord","length","fieldPayload","handler","handle","process","env","NODE_ENV","update","typeName","record","_delete","hasOwnProperty","undefined","getRoot","root","concat","invalidateStore","isStoreMarkedForInvalidation","markIDForInvalidation","add","getIDsMarkedForInvalidation","query","variables","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('../store/RelayModernRecord');\n\nvar _require = require('../store/RelayRecordState'),\n    EXISTENT = _require.EXISTENT,\n    NONEXISTENT = _require.NONEXISTENT;\n\nvar _require2 = require('../store/RelayStoreUtils'),\n    ROOT_ID = _require2.ROOT_ID,\n    ROOT_TYPE = _require2.ROOT_TYPE;\n\nvar _require3 = require('./readUpdatableQuery_EXPERIMENTAL'),\n    _readUpdatableQuery_EXPERIMENTAL = _require3.readUpdatableQuery_EXPERIMENTAL;\n\nvar RelayRecordProxy = require('./RelayRecordProxy');\n\nvar invariant = require('invariant');\n/**\n * @internal\n *\n * A helper for manipulating a `RecordSource` via an imperative/OO-style API.\n */\n\n\nvar RelayRecordSourceProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceProxy(mutator, getDataID, handlerProvider) {\n    this.__mutator = mutator;\n    this._handlerProvider = handlerProvider || null;\n    this._proxies = {};\n    this._getDataID = getDataID;\n    this._invalidatedStore = false;\n    this._idsMarkedForInvalidation = new Set();\n  }\n\n  var _proto = RelayRecordSourceProxy.prototype;\n\n  _proto.publishSource = function publishSource(source, fieldPayloads) {\n    var _this = this;\n\n    var dataIDs = source.getRecordIDs();\n    dataIDs.forEach(function (dataID) {\n      var status = source.getStatus(dataID);\n\n      if (status === EXISTENT) {\n        var sourceRecord = source.get(dataID);\n\n        if (sourceRecord) {\n          if (_this.__mutator.getStatus(dataID) !== EXISTENT) {\n            _this.create(dataID, RelayModernRecord.getType(sourceRecord));\n          }\n\n          _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);\n        }\n      } else if (status === NONEXISTENT) {\n        _this[\"delete\"](dataID);\n      }\n    });\n\n    if (fieldPayloads && fieldPayloads.length) {\n      fieldPayloads.forEach(function (fieldPayload) {\n        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);\n\n        !handler ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for handle `%s`.', fieldPayload.handle) : invariant(false) : void 0;\n        handler.update(_this, fieldPayload);\n      });\n    }\n  };\n\n  _proto.create = function create(dataID, typeName) {\n    this.__mutator.create(dataID, typeName);\n\n    delete this._proxies[dataID];\n    var record = this.get(dataID); // For flow\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#create(): Expected the created record to exist.') : invariant(false) : void 0;\n    return record;\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    !(dataID !== ROOT_ID) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#delete(): Cannot delete the root record.') : invariant(false) : void 0;\n    delete this._proxies[dataID];\n\n    this.__mutator[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    if (!this._proxies.hasOwnProperty(dataID)) {\n      var status = this.__mutator.getStatus(dataID);\n\n      if (status === EXISTENT) {\n        this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);\n      } else {\n        this._proxies[dataID] = status === NONEXISTENT ? null : undefined;\n      }\n    }\n\n    return this._proxies[dataID];\n  };\n\n  _proto.getRoot = function getRoot() {\n    var root = this.get(ROOT_ID);\n\n    if (!root) {\n      root = this.create(ROOT_ID, ROOT_TYPE);\n    }\n\n    !(root && root.getType() === ROOT_TYPE) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceProxy#getRoot(): Expected the source to contain a ' + 'root record, %s.', root == null ? 'no root record found' : \"found a root record of type `\".concat(root.getType(), \"`\")) : invariant(false) : void 0;\n    return root;\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this._invalidatedStore = true;\n  };\n\n  _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {\n    return this._invalidatedStore;\n  };\n\n  _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {\n    this._idsMarkedForInvalidation.add(dataID);\n  };\n\n  _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {\n    return this._idsMarkedForInvalidation;\n  };\n\n  _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {\n    return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);\n  };\n\n  return RelayRecordSourceProxy;\n}();\n\nmodule.exports = RelayRecordSourceProxy;"]},"metadata":{},"sourceType":"script"}